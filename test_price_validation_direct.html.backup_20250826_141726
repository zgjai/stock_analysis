<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>直接测试价格验证修复</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>
    <div class="container mt-4">
        <h2>直接测试价格验证修复</h2>
        <div class="alert alert-info">
            <strong>测试目标：</strong>验证填写了价格和数量后不再出现"价格不能为空"错误
        </div>
        
        <form id="test-trade-form" data-validate>
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="stock-code" class="form-label">股票代码 *</label>
                        <input type="text" class="form-control" id="stock-code" name="stock_code" required
                               placeholder="000001" value="000001">
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="stock-name" class="form-label">股票名称 *</label>
                        <input type="text" class="form-control" id="stock-name" name="stock_name" required
                               placeholder="平安银行" value="平安银行">
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <div class="mb-3">
                        <label for="trade-type" class="form-label">交易类型 *</label>
                        <select class="form-select" id="trade-type" name="trade_type" required>
                            <option value="">请选择</option>
                            <option value="buy" selected>买入</option>
                            <option value="sell">卖出</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label for="price" class="form-label">价格 *</label>
                        <div class="input-group">
                            <span class="input-group-text">¥</span>
                            <input type="number" class="form-control" id="price" name="price" required
                                   step="0.01" min="0.01" max="9999.99" placeholder="0.00" value="19.50">
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label for="quantity" class="form-label">数量 *</label>
                        <input type="number" class="form-control" id="quantity" name="quantity" required
                               min="1" placeholder="100" value="100">
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="reason" class="form-label">买入原因</label>
                <textarea class="form-control" id="reason" name="reason" rows="3"
                          placeholder="请输入买入原因">技术分析买入</textarea>
            </div>

            <button type="submit" id="save-trade-btn" class="btn btn-primary">保存交易记录</button>
            <button type="button" id="test-validation-btn" class="btn btn-secondary ms-2">测试验证逻辑</button>
        </form>

        <div id="test-results" class="mt-4"></div>
    </div>

    <script src="/static/js/utils.js"></script>
    <script src="/static/js/form-validation.js"></script>
    <script>
        class TestTradingRecordsManager {
            constructor() {
                this.editingTradeId = null;
                this.setupEventListeners();
            }

            setupEventListeners() {
                // 测试验证逻辑按钮
                document.getElementById('test-validation-btn').addEventListener('click', () => {
                    this.testValidationLogic();
                });

                // 表单提交
                const form = document.getElementById('test-trade-form');
                form.addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.handleFormSubmit();
                });
            }

            testValidationLogic() {
                const resultsDiv = document.getElementById('test-results');
                resultsDiv.innerHTML = '<div class="alert alert-info">正在测试验证逻辑...</div>';

                try {
                    // 获取表单数据
                    const form = document.getElementById('test-trade-form');
                    const formData = FormUtils.serialize(form);
                    
                    console.log('[TEST] 表单数据:', formData);

                    // 模拟 handleTradeFormSubmit 中的验证逻辑
                    this.simulateValidation(formData);

                } catch (error) {
                    console.error('[TEST] 测试失败:', error);
                    resultsDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <h5>测试失败</h5>
                            <p><strong>错误:</strong> ${error.message}</p>
                        </div>
                    `;
                }
            }

            simulateValidation(formData) {
                const resultsDiv = document.getElementById('test-results');
                
                console.log('[TEST] 开始模拟验证...');
                console.log('[TEST] formData.price:', formData.price, '(type:', typeof formData.price, ')');
                console.log('[TEST] formData.quantity:', formData.quantity, '(type:', typeof formData.quantity, ')');

                // 复制修复后的验证逻辑
                const validateNumericField = (fieldName, fieldValue, isRequired = true) => {
                    console.log(`[TEST] 验证字段 "${fieldName}":`, fieldValue, '(type:', typeof fieldValue, ')');
                    
                    // 如果是编辑模式且字段不存在，允许跳过
                    if (!isRequired && this.editingTradeId && (fieldValue === undefined || fieldValue === null)) {
                        console.log(`[TEST] 跳过验证 "${fieldName}" - 编辑模式且字段为空`);
                        return null;
                    }
                    
                    // 检查必填字段 - 更严格的空值检查
                    if (isRequired && (fieldValue === undefined || fieldValue === null || fieldValue === '' || fieldValue === 0)) {
                        console.error(`[TEST] 验证失败 "${fieldName}" - 字段为空或零值:`, fieldValue);
                        throw new Error(`${fieldName}不能为空`);
                    }
                    
                    // 处理字符串类型
                    if (typeof fieldValue === 'string') {
                        fieldValue = fieldValue.trim();
                        if (fieldValue === '') {
                            if (isRequired) {
                                console.error(`[TEST] 验证失败 "${fieldName}" - 字符串为空`);
                                throw new Error(`${fieldName}不能为空`);
                            }
                            return null;
                        }
                    }
                    
                    console.log(`[TEST] 验证通过 "${fieldName}":`, fieldValue);
                    return fieldValue;
                };

                try {
                    // 验证价格字段 - 添加备用获取方式
                    let priceFieldValue = formData.price;
                    
                    // 如果formData中没有price，直接从DOM元素获取
                    if (priceFieldValue === undefined || priceFieldValue === null || priceFieldValue === '') {
                        const priceElement = document.getElementById('price');
                        if (priceElement) {
                            priceFieldValue = priceElement.value;
                            console.log('[TEST] 从DOM元素获取价格:', priceFieldValue);
                        }
                    }
                    
                    const priceValue = validateNumericField('价格', priceFieldValue, !this.editingTradeId);
                    if (priceValue !== null) {
                        formData.price = priceValue;
                    }

                    // 验证数量字段 - 添加备用获取方式
                    let quantityFieldValue = formData.quantity;
                    
                    // 如果formData中没有quantity，直接从DOM元素获取
                    if (quantityFieldValue === undefined || quantityFieldValue === null || quantityFieldValue === '') {
                        const quantityElement = document.getElementById('quantity');
                        if (quantityElement) {
                            quantityFieldValue = quantityElement.value;
                            console.log('[TEST] 从DOM元素获取数量:', quantityFieldValue);
                        }
                    }
                    
                    const quantityValue = validateNumericField('数量', quantityFieldValue, !this.editingTradeId);
                    if (quantityValue !== null) {
                        formData.quantity = quantityValue;
                    }

                    // 验证成功
                    resultsDiv.innerHTML = `
                        <div class="alert alert-success">
                            <h5>✅ 验证成功！</h5>
                            <p><strong>价格:</strong> ${formData.price} (${typeof formData.price})</p>
                            <p><strong>数量:</strong> ${formData.quantity} (${typeof formData.quantity})</p>
                            <p><strong>结论:</strong> 价格验证问题已修复，不会再出现"价格不能为空"错误。</p>
                        </div>
                    `;

                } catch (error) {
                    console.error('[TEST] 验证失败:', error);
                    resultsDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <h5>❌ 验证失败</h5>
                            <p><strong>错误:</strong> ${error.message}</p>
                            <p><strong>说明:</strong> 这表明修复可能不完整或存在其他问题。</p>
                        </div>
                    `;
                }
            }

            handleFormSubmit() {
                const resultsDiv = document.getElementById('test-results');
                resultsDiv.innerHTML = '<div class="alert alert-info">正在提交表单...</div>';

                try {
                    const form = document.getElementById('test-trade-form');
                    const formData = FormUtils.serialize(form);
                    
                    // 模拟完整的提交流程
                    this.simulateValidation(formData);

                } catch (error) {
                    console.error('[TEST] 表单提交失败:', error);
                    resultsDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <h5>表单提交失败</h5>
                            <p><strong>错误:</strong> ${error.message}</p>
                        </div>
                    `;
                }
            }
        }

        // 初始化测试管理器
        document.addEventListener('DOMContentLoaded', () => {
            new TestTradingRecordsManager();
            
            // 自动运行一次测试
            setTimeout(() => {
                document.getElementById('test-validation-btn').click();
            }, 1000);
        });
    </script>
</body>
</html>