<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Toast修复测试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-4">
        <h2>Toast修复测试</h2>
        
        <div class="card">
            <div class="card-body">
                <button class="btn btn-primary" onclick="testToastWithDuration()">测试数字参数</button>
                <button class="btn btn-secondary" onclick="testToastWithConfig()">测试配置对象</button>
                <button class="btn btn-danger" onclick="testErrorMessage()">测试错误消息</button>
            </div>
        </div>
        
        <!-- Toast容器 -->
        <div id="toast-container" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 复制utils.js中的UXUtils.showToast方法
        const UXUtils = {
            showToast: (message, type = 'info', duration = 3000) => {
                const toastContainer = document.getElementById('toast-container');
                if (!toastContainer) return;

                const toastId = 'toast-' + Date.now();
                const icons = {
                    'success': 'check-circle-fill',
                    'error': 'exclamation-triangle-fill',
                    'warning': 'exclamation-triangle-fill',
                    'info': 'info-circle-fill'
                };

                const titles = {
                    'success': '成功',
                    'error': '错误',
                    'warning': '警告',
                    'info': '提示'
                };

                const colors = {
                    'success': 'text-success',
                    'error': 'text-danger',
                    'warning': 'text-warning',
                    'info': 'text-info'
                };

                const toastHtml = `
                    <div class="toast" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header">
                            <i class="bi bi-${icons[type]} me-2 ${colors[type]}"></i>
                            <strong class="me-auto">${titles[type]}</strong>
                            <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                            <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
                        </div>
                        <div class="toast-body">
                            ${message}
                        </div>
                    </div>
                `;

                toastContainer.insertAdjacentHTML('beforeend', toastHtml);
                const toastElement = document.getElementById(toastId);
                
                console.log('创建Toast，delay参数:', duration, '类型:', typeof duration);
                
                try {
                    const toast = new bootstrap.Toast(toastElement, { delay: duration });
                    toast.show();
                    console.log('✅ Toast创建成功');
                } catch (error) {
                    console.error('❌ Toast创建失败:', error);
                }

                // 自动清理
                toastElement.addEventListener('hidden.bs.toast', () => {
                    toastElement.remove();
                });
            }
        };

        // 复制修复后的showMessage函数
        function showMessage(message, type = 'info', config = {}) {
            console.log('showMessage调用:', { message, type, config });
            
            // 如果config是数字，说明是旧的duration参数，转换为配置对象
            if (typeof config === 'number') {
                config = { duration: config };
                console.log('转换数字参数为配置对象:', config);
            }
            
            const duration = config.duration || 5000;
            console.log('最终duration:', duration);
            
            UXUtils.showToast(message, type, duration);
        }

        function testToastWithDuration() {
            console.log('=== 测试数字参数 ===');
            showMessage('这是一个测试消息（数字参数）', 'info', 3000);
        }

        function testToastWithConfig() {
            console.log('=== 测试配置对象 ===');
            showMessage('这是一个测试消息（配置对象）', 'success', {
                duration: 4000,
                position: 'toast'
            });
        }

        function testErrorMessage() {
            console.log('=== 测试错误消息 ===');
            showMessage('数据验证失败，请检查输入格式', 'error', {
                position: 'toast',
                duration: 6000,
                dismissible: true
            });
        }
    </script>
</body>
</html>