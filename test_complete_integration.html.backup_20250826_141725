<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>复盘功能完整集成测试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .test-section {
            margin-bottom: 2rem;
            padding: 1rem;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
        }
        
        .test-result {
            padding: 0.5rem;
            margin: 0.25rem 0;
            border-radius: 0.25rem;
        }
        
        .test-pass {
            background-color: #d1edff;
            border: 1px solid #0d6efd;
            color: #0d6efd;
        }
        
        .test-fail {
            background-color: #f8d7da;
            border: 1px solid #dc3545;
            color: #dc3545;
        }
        
        .test-warning {
            background-color: #fff3cd;
            border: 1px solid #ffc107;
            color: #856404;
        }
        
        .component-status {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 0.5rem;
        }
        
        .status-active {
            background-color: #28a745;
        }
        
        .status-inactive {
            background-color: #dc3545;
        }
        
        .status-warning {
            background-color: #ffc107;
        }
        
        .log-container {
            max-height: 300px;
            overflow-y: auto;
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.375rem;
            font-family: monospace;
            font-size: 0.875rem;
        }
        
        .floating-profit-container {
            position: relative;
        }
        
        .floating-profit-container.profit {
            background-color: rgba(25, 135, 84, 0.1);
            border-radius: 4px;
            padding: 2px 4px;
        }
        
        .floating-profit-container.loss {
            background-color: rgba(220, 53, 69, 0.1);
            border-radius: 4px;
            padding: 2px 4px;
        }
        
        .floating-profit-container.neutral {
            background-color: rgba(108, 117, 125, 0.1);
            border-radius: 4px;
            padding: 2px 4px;
        }
        
        .holding-days-editor {
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 0.5rem;
            margin: 0.5rem 0;
        }
        
        .days-display {
            cursor: pointer;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            transition: background-color 0.2s;
        }
        
        .days-display:hover {
            background-color: rgba(0, 123, 255, 0.1);
        }
    </style>
</head>
<body>
    <div class="container-fluid py-4">
        <div class="row">
            <div class="col-12">
                <h1 class="mb-4">复盘功能完整集成测试</h1>
                
                <!-- 测试控制面板 -->
                <div class="test-section">
                    <h3>测试控制面板</h3>
                    <div class="row">
                        <div class="col-md-6">
                            <button id="run-all-tests" class="btn btn-primary me-2">运行所有测试</button>
                            <button id="run-integration-test" class="btn btn-success me-2">运行集成测试</button>
                            <button id="clear-logs" class="btn btn-outline-secondary">清除日志</button>
                        </div>
                        <div class="col-md-6 text-end">
                            <div class="d-inline-block">
                                <small class="text-muted">测试状态:</small>
                                <span id="test-status" class="badge bg-secondary">未开始</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- 组件状态监控 -->
                <div class="test-section">
                    <h3>组件状态监控</h3>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-body">
                                    <h6 class="card-title">
                                        <span id="save-manager-status" class="component-status status-inactive"></span>
                                        复盘保存管理器
                                    </h6>
                                    <p class="card-text small" id="save-manager-info">未初始化</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-body">
                                    <h6 class="card-title">
                                        <span id="floating-profit-status" class="component-status status-inactive"></span>
                                        浮盈计算器
                                    </h6>
                                    <p class="card-text small" id="floating-profit-info">未初始化</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-body">
                                    <h6 class="card-title">
                                        <span id="holding-days-status" class="component-status status-inactive"></span>
                                        持仓天数编辑器
                                    </h6>
                                    <p class="card-text small" id="holding-days-info">未初始化</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- 功能测试区域 -->
                <div class="row">
                    <div class="col-md-6">
                        <!-- 浮盈计算测试 -->
                        <div class="test-section">
                            <h4>浮盈计算测试</h4>
                            <div class="mb-3">
                                <label class="form-label">股票代码</label>
                                <input type="text" class="form-control" id="test-stock-code" value="000001" placeholder="输入股票代码">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">买入价格</label>
                                <input type="number" class="form-control" id="test-buy-price" value="10.00" step="0.01" placeholder="输入买入价格">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">当前价格</label>
                                <div class="input-group">
                                    <span class="input-group-text">¥</span>
                                    <input type="number" class="form-control" id="current-price-input" 
                                           placeholder="输入当前价格" step="0.01" min="0.01" max="9999.99">
                                </div>
                                <div id="floating-profit-error" class="text-danger small mt-1" style="display: none;"></div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">浮盈结果</label>
                                <div class="floating-profit-container">
                                    <div class="form-control-plaintext fw-bold" id="floating-profit-ratio">--</div>
                                    <small class="text-muted" id="profit-amount-display">--</small>
                                </div>
                                <div id="buy-price-display" class="small text-muted">买入价格: --</div>
                            </div>
                            <button id="test-floating-profit" class="btn btn-outline-primary">测试浮盈计算</button>
                        </div>
                        
                        <!-- 持仓天数编辑测试 -->
                        <div class="test-section">
                            <h4>持仓天数编辑测试</h4>
                            <div class="mb-3">
                                <label class="form-label">测试持仓天数编辑器</label>
                                <div id="holding-days-test-container" class="holding-days-editor">
                                    <!-- 持仓天数编辑器将在这里动态创建 -->
                                </div>
                            </div>
                            <button id="test-holding-days" class="btn btn-outline-primary">创建编辑器</button>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <!-- 复盘保存测试 -->
                        <div class="test-section">
                            <h4>复盘保存测试</h4>
                            <form id="review-form">
                                <input type="hidden" id="review-stock-code" value="000001">
                                <input type="hidden" id="review-id">
                                
                                <div class="mb-3">
                                    <label class="form-label">复盘日期</label>
                                    <input type="date" class="form-control" id="review-date" required>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">持仓天数</label>
                                    <input type="number" class="form-control" id="holding-days" min="1" value="5" required>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">分析内容</label>
                                    <textarea class="form-control" id="analysis" rows="3" placeholder="请输入分析内容...">测试分析内容</textarea>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">决策结果</label>
                                    <select class="form-select" id="decision" required>
                                        <option value="">请选择决策</option>
                                        <option value="hold" selected>继续持有</option>
                                        <option value="sell_partial">部分止盈</option>
                                        <option value="sell_all">清仓</option>
                                    </select>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">决策理由</label>
                                    <textarea class="form-control" id="reason" rows="2" placeholder="请输入决策理由..." required>测试决策理由</textarea>
                                </div>
                                
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="price-up-score" value="1" checked>
                                        <label class="form-check-label" for="price-up-score">收盘价上升</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="bbi-score" value="1">
                                        <label class="form-check-label" for="bbi-score">不破BBI线</label>
                                    </div>
                                </div>
                                
                                <button type="button" id="test-save-review" class="btn btn-outline-success">测试保存</button>
                            </form>
                        </div>
                        
                        <!-- 集成状态 -->
                        <div class="test-section">
                            <h4>集成状态</h4>
                            <div id="integration-status">
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle"></i>
                                    等待初始化...
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- 测试结果 -->
                <div class="test-section">
                    <h3>测试结果</h3>
                    <div id="test-results">
                        <div class="alert alert-secondary">
                            <i class="bi bi-clock"></i>
                            等待测试开始...
                        </div>
                    </div>
                </div>
                
                <!-- 日志输出 -->
                <div class="test-section">
                    <h3>日志输出</h3>
                    <div id="log-container" class="log-container">
                        <div class="text-muted">等待日志输出...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 复盘模态框（用于测试） -->
    <div class="modal fade" id="reviewModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">复盘评分测试</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>这是一个测试模态框，用于验证集成功能。</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 引入依赖 -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    
    <!-- 引入组件脚本 -->
    <script>
        // 设置正确的API基础URL
        const API_BASE_URL = 'http://localhost:5001';
    </script>
    <script src="http://localhost:5001/static/js/api.js"></script>
    <script src="http://localhost:5001/static/js/holding-days-editor.js"></script>
    <script src="http://localhost:5001/static/js/floating-profit-calculator.js"></script>
    <script src="http://localhost:5001/static/js/review-save-manager.js"></script>
    <script src="http://localhost:5001/static/js/review-integration.js"></script>

    <script>
        // 测试管理器
        class IntegrationTestManager {
            constructor() {
                this.testResults = {};
                this.logContainer = document.getElementById('log-container');
                this.testStatus = document.getElementById('test-status');
                this.integrationManager = null;
                
                this.init();
            }
            
            init() {
                this.setupEventListeners();
                this.setupLogging();
                this.initializeComponents();
            }
            
            setupEventListeners() {
                document.getElementById('run-all-tests').addEventListener('click', () => {
                    this.runAllTests();
                });
                
                document.getElementById('run-integration-test').addEventListener('click', () => {
                    this.runIntegrationTest();
                });
                
                document.getElementById('clear-logs').addEventListener('click', () => {
                    this.clearLogs();
                });
                
                document.getElementById('test-floating-profit').addEventListener('click', () => {
                    this.testFloatingProfitCalculation();
                });
                
                document.getElementById('test-holding-days').addEventListener('click', () => {
                    this.testHoldingDaysEditor();
                });
                
                document.getElementById('test-save-review').addEventListener('click', () => {
                    this.testReviewSave();
                });
                
                // 设置当前日期
                document.getElementById('review-date').value = new Date().toISOString().split('T')[0];
            }
            
            setupLogging() {
                // 拦截console.log
                const originalLog = console.log;
                const originalError = console.error;
                const originalWarn = console.warn;
                
                console.log = (...args) => {
                    originalLog.apply(console, args);
                    this.addLog('INFO', args.join(' '));
                };
                
                console.error = (...args) => {
                    originalError.apply(console, args);
                    this.addLog('ERROR', args.join(' '));
                };
                
                console.warn = (...args) => {
                    originalWarn.apply(console, args);
                    this.addLog('WARN', args.join(' '));
                };
            }
            
            async initializeComponents() {
                try {
                    this.addLog('INFO', '开始初始化组件...');
                    
                    // 等待集成管理器初始化
                    await this.waitForIntegrationManager();
                    
                    this.updateComponentStatus();
                    this.updateIntegrationStatus();
                    
                    this.addLog('INFO', '组件初始化完成');
                } catch (error) {
                    this.addLog('ERROR', '组件初始化失败: ' + error.message);
                }
            }
            
            async waitForIntegrationManager() {
                return new Promise((resolve, reject) => {
                    let attempts = 0;
                    const maxAttempts = 50;
                    
                    const checkManager = () => {
                        attempts++;
                        
                        if (typeof getReviewIntegrationManager === 'function') {
                            this.integrationManager = getReviewIntegrationManager();
                            if (this.integrationManager && this.integrationManager.state.isInitialized) {
                                resolve();
                                return;
                            }
                        }
                        
                        if (attempts >= maxAttempts) {
                            reject(new Error('集成管理器初始化超时'));
                            return;
                        }
                        
                        setTimeout(checkManager, 100);
                    };
                    
                    checkManager();
                });
            }
            
            updateComponentStatus() {
                if (!this.integrationManager) return;
                
                const state = this.integrationManager.getState();
                
                // 更新保存管理器状态
                const saveManagerStatus = document.getElementById('save-manager-status');
                const saveManagerInfo = document.getElementById('save-manager-info');
                if (state.components.saveManager) {
                    saveManagerStatus.className = 'component-status status-active';
                    saveManagerInfo.textContent = '已初始化并运行';
                } else {
                    saveManagerStatus.className = 'component-status status-inactive';
                    saveManagerInfo.textContent = '未初始化';
                }
                
                // 更新浮盈计算器状态
                const floatingProfitStatus = document.getElementById('floating-profit-status');
                const floatingProfitInfo = document.getElementById('floating-profit-info');
                if (state.components.floatingProfitCalculator) {
                    floatingProfitStatus.className = 'component-status status-active';
                    floatingProfitInfo.textContent = '已初始化并运行';
                } else {
                    floatingProfitStatus.className = 'component-status status-inactive';
                    floatingProfitInfo.textContent = '未初始化';
                }
                
                // 更新持仓天数编辑器状态
                const holdingDaysStatus = document.getElementById('holding-days-status');
                const holdingDaysInfo = document.getElementById('holding-days-info');
                if (state.components.holdingDaysEditors > 0) {
                    holdingDaysStatus.className = 'component-status status-active';
                    holdingDaysInfo.textContent = `${state.components.holdingDaysEditors} 个编辑器运行中`;
                } else {
                    holdingDaysStatus.className = 'component-status status-warning';
                    holdingDaysInfo.textContent = '可用但未创建实例';
                }
            }
            
            updateIntegrationStatus() {
                const statusContainer = document.getElementById('integration-status');
                
                if (this.integrationManager && this.integrationManager.state.isInitialized) {
                    statusContainer.innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle"></i>
                            集成管理器已初始化并运行
                        </div>
                        <div class="small text-muted">
                            <strong>当前状态:</strong><br>
                            - 模态框状态: ${this.integrationManager.state.isModalOpen ? '打开' : '关闭'}<br>
                            - 当前股票: ${this.integrationManager.state.currentStockCode || '无'}<br>
                            - 组件数量: ${Object.keys(this.integrationManager.components).length}
                        </div>
                    `;
                } else {
                    statusContainer.innerHTML = `
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            集成管理器未初始化
                        </div>
                    `;
                }
            }
            
            async runAllTests() {
                this.testStatus.textContent = '运行中';
                this.testStatus.className = 'badge bg-warning';
                
                this.addLog('INFO', '开始运行所有测试...');
                
                const tests = [
                    { name: '组件初始化测试', fn: () => this.testComponentInitialization() },
                    { name: '浮盈计算测试', fn: () => this.testFloatingProfitCalculation() },
                    { name: '持仓天数编辑测试', fn: () => this.testHoldingDaysEditor() },
                    { name: '复盘保存测试', fn: () => this.testReviewSave() },
                    { name: '事件通信测试', fn: () => this.testEventCommunication() },
                    { name: '数据流测试', fn: () => this.testDataFlow() },
                    { name: '错误处理测试', fn: () => this.testErrorHandling() }
                ];
                
                const results = [];
                
                for (const test of tests) {
                    try {
                        this.addLog('INFO', `运行测试: ${test.name}`);
                        const result = await test.fn();
                        results.push({ name: test.name, success: result, error: null });
                        this.addLog('INFO', `测试 ${test.name}: ${result ? 'PASS' : 'FAIL'}`);
                    } catch (error) {
                        results.push({ name: test.name, success: false, error: error.message });
                        this.addLog('ERROR', `测试 ${test.name} 失败: ${error.message}`);
                    }
                    
                    // 短暂延迟，避免测试冲突
                    await new Promise(resolve => setTimeout(resolve, 200));
                }
                
                this.displayTestResults(results);
                
                const passCount = results.filter(r => r.success).length;
                const totalCount = results.length;
                
                if (passCount === totalCount) {
                    this.testStatus.textContent = '全部通过';
                    this.testStatus.className = 'badge bg-success';
                } else {
                    this.testStatus.textContent = `${passCount}/${totalCount} 通过`;
                    this.testStatus.className = 'badge bg-danger';
                }
                
                this.addLog('INFO', `测试完成: ${passCount}/${totalCount} 通过`);
            }
            
            async runIntegrationTest() {
                if (!this.integrationManager) {
                    this.addLog('ERROR', '集成管理器未初始化');
                    return;
                }
                
                this.addLog('INFO', '运行集成测试...');
                
                try {
                    const results = await this.integrationManager.runIntegrationTest();
                    this.displayIntegrationTestResults(results);
                } catch (error) {
                    this.addLog('ERROR', '集成测试失败: ' + error.message);
                }
            }
            
            testComponentInitialization() {
                if (!this.integrationManager) {
                    return false;
                }
                
                const state = this.integrationManager.getState();
                return state.isInitialized && 
                       state.components.saveManager && 
                       state.components.floatingProfitCalculator;
            }
            
            async testFloatingProfitCalculation() {
                try {
                    const stockCode = document.getElementById('test-stock-code').value;
                    const buyPrice = parseFloat(document.getElementById('test-buy-price').value);
                    const currentPrice = parseFloat(document.getElementById('current-price-input').value) || 11.50;
                    
                    if (!this.integrationManager || !this.integrationManager.components.floatingProfitCalculator) {
                        throw new Error('浮盈计算器未初始化');
                    }
                    
                    const calculator = this.integrationManager.components.floatingProfitCalculator;
                    calculator.stockCode = stockCode;
                    calculator.setBuyPrice(buyPrice);
                    calculator.setCurrentPrice(currentPrice);
                    
                    // 等待计算完成
                    await new Promise(resolve => setTimeout(resolve, 500));
                    
                    const result = calculator.getCalculationResult();
                    
                    if (result && result.floating_profit_ratio !== null) {
                        this.addLog('INFO', `浮盈计算结果: ${result.formatted_ratio}`);
                        return true;
                    }
                    
                    return false;
                } catch (error) {
                    this.addLog('ERROR', '浮盈计算测试失败: ' + error.message);
                    return false;
                }
            }
            
            async testHoldingDaysEditor() {
                try {
                    const container = document.getElementById('holding-days-test-container');
                    const stockCode = document.getElementById('test-stock-code').value;
                    
                    if (!this.integrationManager) {
                        throw new Error('集成管理器未初始化');
                    }
                    
                    const editor = this.integrationManager.createHoldingDaysEditor(stockCode, 5, container);
                    
                    if (editor) {
                        this.addLog('INFO', '持仓天数编辑器创建成功');
                        return true;
                    }
                    
                    return false;
                } catch (error) {
                    this.addLog('ERROR', '持仓天数编辑器测试失败: ' + error.message);
                    return false;
                }
            }
            
            async testReviewSave() {
                try {
                    if (!this.integrationManager || !this.integrationManager.components.saveManager) {
                        throw new Error('保存管理器未初始化');
                    }
                    
                    // 模拟表单变化
                    const analysisField = document.getElementById('analysis');
                    analysisField.value = '测试分析内容 - ' + new Date().toISOString();
                    analysisField.dispatchEvent(new Event('input', { bubbles: true }));
                    
                    // 检查是否检测到变化
                    const hasChanges = this.integrationManager.hasUnsavedChanges();
                    
                    if (hasChanges) {
                        this.addLog('INFO', '复盘保存管理器正常检测到表单变化');
                        return true;
                    }
                    
                    return false;
                } catch (error) {
                    this.addLog('ERROR', '复盘保存测试失败: ' + error.message);
                    return false;
                }
            }
            
            async testEventCommunication() {
                try {
                    if (!this.integrationManager) {
                        throw new Error('集成管理器未初始化');
                    }
                    
                    let eventReceived = false;
                    
                    // 监听测试事件
                    const handler = () => {
                        eventReceived = true;
                    };
                    
                    this.integrationManager.addEventListener('test', handler);
                    this.integrationManager.triggerEvent('test', { message: 'test' });
                    
                    // 等待事件处理
                    await new Promise(resolve => setTimeout(resolve, 100));
                    
                    this.integrationManager.removeEventListener('test', handler);
                    
                    return eventReceived;
                } catch (error) {
                    this.addLog('ERROR', '事件通信测试失败: ' + error.message);
                    return false;
                }
            }
            
            async testDataFlow() {
                try {
                    // 测试价格输入 -> 浮盈计算 -> 显示更新的数据流
                    const priceInput = document.getElementById('current-price-input');
                    priceInput.value = '12.50';
                    priceInput.dispatchEvent(new Event('input', { bubbles: true }));
                    
                    // 等待处理
                    await new Promise(resolve => setTimeout(resolve, 500));
                    
                    const ratioDisplay = document.getElementById('floating-profit-ratio');
                    const hasResult = ratioDisplay && ratioDisplay.textContent !== '--';
                    
                    return hasResult;
                } catch (error) {
                    this.addLog('ERROR', '数据流测试失败: ' + error.message);
                    return false;
                }
            }
            
            async testErrorHandling() {
                try {
                    // 测试无效输入的错误处理
                    const priceInput = document.getElementById('current-price-input');
                    priceInput.value = '-1';
                    priceInput.dispatchEvent(new Event('input', { bubbles: true }));
                    
                    // 等待处理
                    await new Promise(resolve => setTimeout(resolve, 300));
                    
                    // 检查是否显示了错误
                    const errorDisplay = document.getElementById('floating-profit-error');
                    const hasError = errorDisplay && errorDisplay.style.display !== 'none';
                    
                    // 清除错误输入
                    priceInput.value = '';
                    priceInput.dispatchEvent(new Event('input', { bubbles: true }));
                    
                    return hasError;
                } catch (error) {
                    this.addLog('ERROR', '错误处理测试失败: ' + error.message);
                    return false;
                }
            }
            
            displayTestResults(results) {
                const container = document.getElementById('test-results');
                
                let html = '<div class="row">';
                
                results.forEach(result => {
                    const statusClass = result.success ? 'test-pass' : 'test-fail';
                    const icon = result.success ? 'bi-check-circle' : 'bi-x-circle';
                    
                    html += `
                        <div class="col-md-6 mb-2">
                            <div class="test-result ${statusClass}">
                                <i class="bi ${icon}"></i>
                                <strong>${result.name}</strong>
                                ${result.error ? `<br><small>${result.error}</small>` : ''}
                            </div>
                        </div>
                    `;
                });
                
                html += '</div>';
                container.innerHTML = html;
            }
            
            displayIntegrationTestResults(results) {
                const container = document.getElementById('test-results');
                
                let html = '<h5>集成测试结果</h5><div class="row">';
                
                Object.entries(results).forEach(([testName, passed]) => {
                    const statusClass = passed ? 'test-pass' : 'test-fail';
                    const icon = passed ? 'bi-check-circle' : 'bi-x-circle';
                    
                    html += `
                        <div class="col-md-6 mb-2">
                            <div class="test-result ${statusClass}">
                                <i class="bi ${icon}"></i>
                                <strong>${testName}</strong>
                            </div>
                        </div>
                    `;
                });
                
                html += '</div>';
                container.innerHTML = html;
            }
            
            addLog(level, message) {
                const timestamp = new Date().toLocaleTimeString();
                const logEntry = document.createElement('div');
                logEntry.className = `log-entry log-${level.toLowerCase()}`;
                logEntry.innerHTML = `<span class="text-muted">[${timestamp}]</span> <strong>${level}:</strong> ${message}`;
                
                this.logContainer.appendChild(logEntry);
                this.logContainer.scrollTop = this.logContainer.scrollHeight;
            }
            
            clearLogs() {
                this.logContainer.innerHTML = '<div class="text-muted">日志已清除</div>';
            }
        }
        
        // 页面加载完成后初始化测试管理器
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => {
                new IntegrationTestManager();
            }, 1000);
        });
        
        // 全局消息显示函数
        function showMessage(message, type = 'info') {
            const alertClass = type === 'success' ? 'alert-success' : 
                              type === 'error' ? 'alert-danger' : 
                              type === 'warning' ? 'alert-warning' : 'alert-info';
            
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }
    </script>
</body>
</html>