<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API问题调试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-4">
        <div class="card">
            <div class="card-header">
                <h4>API问题调试</h4>
            </div>
            <div class="card-body">
                <div id="debug-log" class="border rounded p-3" style="height: 400px; overflow-y: auto; background: #f8f9fa; font-family: monospace; font-size: 12px;">
                    <div class="text-muted">开始调试...</div>
                </div>
                
                <div class="mt-3">
                    <button id="test-api" class="btn btn-primary">测试API</button>
                    <button id="test-holdings" class="btn btn-success">测试持仓数据</button>
                    <button id="clear-log" class="btn btn-secondary">清空日志</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 按照正确顺序加载脚本 -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios@1.4.0/dist/axios.min.js"></script>
    <script src="/static/js/utils.js"></script>
    <script src="/static/js/api.js"></script>
    
    <script>
        const debugLog = document.getElementById('debug-log');
        
        function log(message, type = 'info') {
            const timestamp = new Date().toLocaleTimeString();
            const colors = {
                'info': 'color: #0d6efd;',
                'success': 'color: #198754;',
                'error': 'color: #dc3545;',
                'warning': 'color: #fd7e14;'
            };
            
            const logEntry = document.createElement('div');
            logEntry.style.cssText = colors[type] || 'color: #6c757d;';
            logEntry.innerHTML = `[${timestamp}] ${message}`;
            
            debugLog.appendChild(logEntry);
            debugLog.scrollTop = debugLog.scrollHeight;
            
            console.log(message);
        }
        
        function checkDependencies() {
            log('=== 检查依赖 ===', 'info');
            
            // 检查axios
            if (typeof axios !== 'undefined') {
                log('✅ axios 已加载', 'success');
            } else {
                log('❌ axios 未加载', 'error');
                return false;
            }
            
            // 检查ApiClient类
            if (typeof ApiClient !== 'undefined') {
                log('✅ ApiClient 类已定义', 'success');
            } else {
                log('❌ ApiClient 类未定义', 'error');
                return false;
            }
            
            // 检查apiClient实例
            if (typeof apiClient !== 'undefined') {
                log('✅ apiClient 实例已创建', 'success');
            } else {
                log('❌ apiClient 实例未创建', 'error');
                return false;
            }
            
            return true;
        }
        
        async function testAPI() {
            log('=== 测试API连接 ===', 'info');
            
            if (!checkDependencies()) {
                log('依赖检查失败，无法继续测试', 'error');
                return;
            }
            
            try {
                // 测试基本连接
                log('测试基本连接...', 'info');
                const response = await axios.get('/api/test', { timeout: 5000 });
                log(`✅ API连接成功: ${response.status}`, 'success');
                
            } catch (error) {
                log(`❌ API连接失败: ${error.message}`, 'error');
                
                if (error.response) {
                    log(`响应状态: ${error.response.status}`, 'warning');
                    log(`响应数据: ${JSON.stringify(error.response.data)}`, 'warning');
                } else if (error.request) {
                    log('请求已发送但无响应', 'warning');
                } else {
                    log(`请求配置错误: ${error.message}`, 'warning');
                }
            }
        }
        
        async function testHoldings() {
            log('=== 测试持仓数据 ===', 'info');
            
            if (!checkDependencies()) {
                log('依赖检查失败，无法继续测试', 'error');
                return;
            }
            
            try {
                log('调用 apiClient.getHoldings()...', 'info');
                const result = await apiClient.getHoldings();
                
                log(`✅ 持仓数据获取成功`, 'success');
                log(`响应: ${JSON.stringify(result, null, 2)}`, 'info');
                
            } catch (error) {
                log(`❌ 持仓数据获取失败: ${error.message}`, 'error');
                console.error('详细错误:', error);
            }
        }
        
        // 事件监听器
        document.getElementById('test-api').addEventListener('click', testAPI);
        document.getElementById('test-holdings').addEventListener('click', testHoldings);
        document.getElementById('clear-log').addEventListener('click', () => {
            debugLog.innerHTML = '<div class="text-muted">日志已清空</div>';
        });
        
        // 页面加载完成后自动检查依赖
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => {
                checkDependencies();
            }, 1000);
        });
        
        // 捕获全局错误
        window.addEventListener('error', (e) => {
            log(`💥 JavaScript错误: ${e.error?.message || e.message}`, 'error');
        });
        
        window.addEventListener('unhandledrejection', (e) => {
            log(`💥 未处理的Promise拒绝: ${e.reason}`, 'error');
        });
    </script>
</body>
</html>