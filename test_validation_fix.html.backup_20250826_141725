<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>表单验证修复测试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .test-container {
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
        }
        .test-result {
            margin: 10px 0;
            padding: 10px;
            border-radius: 5px;
        }
        .success { background-color: #d4edda; color: #155724; }
        .error { background-color: #f8d7da; color: #721c24; }
        .info { background-color: #d1ecf1; color: #0c5460; }
    </style>
</head>
<body>
    <div class="test-container">
        <h2>表单验证修复测试</h2>
        <p>测试交易日期和数量字段的验证逻辑是否正常工作</p>

        <div class="card">
            <div class="card-header">
                <h5>测试表单</h5>
            </div>
            <div class="card-body">
                <form id="test-form" novalidate>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="trade-date" class="form-label">交易日期 *</label>
                            <input type="datetime-local" class="form-control" id="trade-date" name="trade_date" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6">
                            <label for="quantity" class="form-label">数量 *</label>
                            <input type="number" class="form-control" id="quantity" name="quantity" required>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="price" class="form-label">价格 *</label>
                            <input type="number" step="0.01" class="form-control" id="price" name="price" required>
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6">
                            <label for="stock-code" class="form-label">股票代码 *</label>
                            <input type="text" class="form-control" id="stock-code" name="stock_code" required>
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button type="button" class="btn btn-primary" onclick="testValidation()">测试验证</button>
                        <button type="button" class="btn btn-secondary" onclick="fillTestData()">填充测试数据</button>
                        <button type="button" class="btn btn-warning" onclick="clearForm()">清空表单</button>
                    </div>
                </form>
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <h5>测试结果</h5>
            </div>
            <div class="card-body">
                <div id="test-results"></div>
            </div>
        </div>
    </div>

    <script src="static/js/simple-form-validator.js"></script>
    <script>
        let validator;

        document.addEventListener('DOMContentLoaded', function() {
            // 初始化验证器
            validator = new SimpleFormValidator('test-form');
            
            // 设置默认交易日期
            const now = new Date();
            const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000)
                .toISOString().slice(0, 16);
            document.getElementById('trade-date').value = localDateTime;
            
            addResult('✅ 验证器初始化完成', 'success');
        });

        function fillTestData() {
            document.getElementById('trade-date').value = '2025-08-04T17:03';
            document.getElementById('quantity').value = '31100';
            document.getElementById('price').value = '19.453';
            document.getElementById('stock-code').value = '000776';
            
            addResult('📝 测试数据已填充', 'info');
        }

        function clearForm() {
            document.getElementById('test-form').reset();
            
            // 清除所有验证状态
            document.querySelectorAll('.is-invalid, .is-valid').forEach(el => {
                el.classList.remove('is-invalid', 'is-valid');
            });
            
            // 清除错误消息
            document.querySelectorAll('.invalid-feedback').forEach(el => {
                el.style.display = 'none';
            });
            
            addResult('🧹 表单已清空', 'info');
        }

        function testValidation() {
            addResult('🔍 开始验证测试...', 'info');
            
            // 清除之前的结果
            const resultsDiv = document.getElementById('test-results');
            const existingResults = resultsDiv.querySelectorAll('.test-result:not(.permanent)');
            existingResults.forEach(el => el.remove());
            
            // 测试各个字段
            testField('trade-date', '交易日期');
            testField('quantity', '数量');
            testField('price', '价格');
            testField('stock-code', '股票代码');
            
            // 测试整个表单
            const isFormValid = validator.validateForm();
            addResult(`📋 整体表单验证: ${isFormValid ? '✅ 通过' : '❌ 失败'}`, isFormValid ? 'success' : 'error');
            
            if (!isFormValid) {
                addResult(`错误详情: ${JSON.stringify(validator.errors)}`, 'error');
            }
        }

        function testField(fieldId, fieldName) {
            const field = document.getElementById(fieldId);
            const value = field.value;
            
            // 验证字段
            const isValid = validator.validateField(fieldId);
            
            // 检查CSS类
            const hasInvalidClass = field.classList.contains('is-invalid');
            const hasValidClass = field.classList.contains('is-valid');
            
            addResult(`${fieldName} (${fieldId}):`, 'info');
            addResult(`  值: "${value}"`, 'info');
            addResult(`  验证结果: ${isValid ? '✅ 通过' : '❌ 失败'}`, isValid ? 'success' : 'error');
            addResult(`  CSS状态: is-invalid=${hasInvalidClass}, is-valid=${hasValidClass}`, 'info');
            
            if (!isValid && validator.errors[fieldId]) {
                addResult(`  错误消息: ${validator.errors[fieldId]}`, 'error');
            }
            
            // 检查状态一致性
            if (isValid && hasInvalidClass) {
                addResult(`  ⚠️ 状态不一致: 验证通过但显示为无效`, 'error');
            } else if (!isValid && hasValidClass) {
                addResult(`  ⚠️ 状态不一致: 验证失败但显示为有效`, 'error');
            } else {
                addResult(`  ✅ 状态一致`, 'success');
            }
        }

        function addResult(message, type) {
            const resultsDiv = document.getElementById('test-results');
            const resultDiv = document.createElement('div');
            resultDiv.className = `test-result ${type}`;
            resultDiv.textContent = message;
            resultsDiv.appendChild(resultDiv);
        }
    </script>
</body>
</html>