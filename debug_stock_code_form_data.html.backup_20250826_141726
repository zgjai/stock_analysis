<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>股票代码表单数据调试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .debug-section {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            margin: 1rem 0;
        }
        .debug-output {
            background: #212529;
            color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.375rem;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1>股票代码表单数据调试</h1>
        
        <div class="debug-section">
            <h3>测试表单</h3>
            <form id="test-form">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="stock-code" class="form-label">股票代码 <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="stock-code" name="stock_code" required
                                placeholder="例如: 000001" maxlength="6" pattern="[0-9]{6}" value="000001">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="stock-name" class="form-label">股票名称 <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="stock-name" name="stock_name" required
                                placeholder="例如: 平安银行" value="平安银行">
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="trade-type" class="form-label">交易类型 <span class="text-danger">*</span></label>
                            <select class="form-select" id="trade-type" name="trade_type" required>
                                <option value="">请选择交易类型</option>
                                <option value="buy" selected>买入</option>
                                <option value="sell">卖出</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="trade-date" class="form-label">交易日期 <span class="text-danger">*</span></label>
                            <input type="datetime-local" class="form-control" id="trade-date" name="trade_date" required>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="price" class="form-label">价格 <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">¥</span>
                                <input type="number" class="form-control" id="price" name="price" required
                                    step="0.01" min="0.01" max="9999.99" placeholder="0.00" value="10.50">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="quantity" class="form-label">数量 <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <input type="number" class="form-control" id="quantity" name="quantity" required
                                    min="100" step="100" placeholder="100" value="1000">
                                <span class="input-group-text">股</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="reason" class="form-label">操作原因 <span class="text-danger">*</span></label>
                    <select class="form-select" id="reason" name="reason" required>
                        <option value="">请选择操作原因</option>
                        <option value="少妇B1战法" selected>少妇B1战法</option>
                        <option value="少妇SB1战法">少妇SB1战法</option>
                        <option value="少妇B2战法">少妇B2战法</option>
                        <option value="单针二十战法">单针二十战法</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label for="notes" class="form-label">备注</label>
                    <textarea class="form-control" id="notes" name="notes" rows="3" maxlength="500"
                        placeholder="可选的备注信息...">测试备注</textarea>
                </div>

                <button type="button" class="btn btn-primary" onclick="testFormSerialization()">测试表单序列化</button>
                <button type="button" class="btn btn-success" onclick="testApiCall()">测试API调用</button>
                <button type="button" class="btn btn-warning" onclick="testDirectFormData()">测试直接FormData</button>
            </form>
        </div>

        <div class="debug-section">
            <h3>调试输出</h3>
            <div id="debug-output" class="debug-output">等待测试...</div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        // 设置当前时间为默认交易日期
        document.getElementById('trade-date').value = new Date().toISOString().slice(0, 16);

        // 调试输出函数
        function debugLog(message) {
            const output = document.getElementById('debug-output');
            const timestamp = new Date().toLocaleTimeString();
            output.textContent += `[${timestamp}] ${message}\n`;
            output.scrollTop = output.scrollHeight;
        }

        function clearDebugLog() {
            document.getElementById('debug-output').textContent = '';
        }

        // FormUtils.serialize 的实现（从utils.js复制）
        const FormUtils = {
            serialize: (form) => {
                const formData = new FormData(form);
                const data = {};
                
                for (let [key, value] of formData.entries()) {
                    if (data[key]) {
                        // 处理多选字段
                        if (Array.isArray(data[key])) {
                            data[key].push(value);
                        } else {
                            data[key] = [data[key], value];
                        }
                    } else {
                        data[key] = value;
                    }
                }
                
                return data;
            }
        };

        // 测试表单序列化
        function testFormSerialization() {
            clearDebugLog();
            debugLog('=== 测试表单序列化 ===');
            
            const form = document.getElementById('test-form');
            
            // 测试 FormUtils.serialize
            debugLog('1. 使用 FormUtils.serialize:');
            const serializedData = FormUtils.serialize(form);
            debugLog('序列化结果:');
            debugLog(JSON.stringify(serializedData, null, 2));
            
            // 检查股票代码
            debugLog(`\n2. 股票代码检查:`);
            debugLog(`stock_code 存在: ${serializedData.hasOwnProperty('stock_code')}`);
            debugLog(`stock_code 值: "${serializedData.stock_code}"`);
            debugLog(`stock_code 类型: ${typeof serializedData.stock_code}`);
            debugLog(`stock_code 是否为空: ${serializedData.stock_code === '' || serializedData.stock_code === null || serializedData.stock_code === undefined}`);
            
            // 测试原生 FormData
            debugLog('\n3. 使用原生 FormData:');
            const formData = new FormData(form);
            debugLog('FormData 条目:');
            for (let [key, value] of formData.entries()) {
                debugLog(`  ${key}: "${value}" (${typeof value})`);
            }
            
            // 测试直接获取元素值
            debugLog('\n4. 直接获取元素值:');
            const stockCodeElement = document.getElementById('stock-code');
            debugLog(`股票代码元素值: "${stockCodeElement.value}"`);
            debugLog(`股票代码元素name: "${stockCodeElement.name}"`);
            debugLog(`股票代码元素required: ${stockCodeElement.required}`);
        }

        // 测试API调用
        async function testApiCall() {
            clearDebugLog();
            debugLog('=== 测试API调用 ===');
            
            const form = document.getElementById('test-form');
            const formData = FormUtils.serialize(form);
            
            debugLog('1. 准备发送的数据:');
            debugLog(JSON.stringify(formData, null, 2));
            
            try {
                debugLog('\n2. 发送API请求...');
                const response = await axios.post('/api/trades', formData, {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                debugLog('3. API响应成功:');
                debugLog(JSON.stringify(response.data, null, 2));
                
            } catch (error) {
                debugLog('3. API响应错误:');
                if (error.response) {
                    debugLog(`状态码: ${error.response.status}`);
                    debugLog(`错误数据: ${JSON.stringify(error.response.data, null, 2)}`);
                } else if (error.request) {
                    debugLog('网络错误: 无响应');
                } else {
                    debugLog(`请求错误: ${error.message}`);
                }
            }
        }

        // 测试直接FormData
        function testDirectFormData() {
            clearDebugLog();
            debugLog('=== 测试直接FormData ===');
            
            const form = document.getElementById('test-form');
            
            // 手动构建数据对象
            const manualData = {
                stock_code: document.getElementById('stock-code').value,
                stock_name: document.getElementById('stock-name').value,
                trade_type: document.getElementById('trade-type').value,
                trade_date: document.getElementById('trade-date').value,
                price: document.getElementById('price').value,
                quantity: document.getElementById('quantity').value,
                reason: document.getElementById('reason').value,
                notes: document.getElementById('notes').value
            };
            
            debugLog('1. 手动构建的数据:');
            debugLog(JSON.stringify(manualData, null, 2));
            
            // 验证必填字段
            debugLog('\n2. 必填字段验证:');
            const requiredFields = ['stock_code', 'stock_name', 'trade_type', 'price', 'quantity', 'reason'];
            let hasErrors = false;
            
            for (const field of requiredFields) {
                const value = manualData[field];
                const isEmpty = !value || value.toString().trim() === '';
                debugLog(`${field}: ${isEmpty ? '❌ 空值' : '✅ 有值'} ("${value}")`);
                if (isEmpty) hasErrors = true;
            }
            
            debugLog(`\n验证结果: ${hasErrors ? '❌ 有错误' : '✅ 通过'}`);
            
            // 测试数值转换
            debugLog('\n3. 数值字段转换:');
            try {
                const price = parseFloat(manualData.price);
                const quantity = parseInt(manualData.quantity);
                debugLog(`价格转换: "${manualData.price}" -> ${price} (${typeof price})`);
                debugLog(`数量转换: "${manualData.quantity}" -> ${quantity} (${typeof quantity})`);
                debugLog(`价格有效: ${!isNaN(price) && price > 0}`);
                debugLog(`数量有效: ${!isNaN(quantity) && quantity > 0 && quantity % 100 === 0}`);
            } catch (error) {
                debugLog(`转换错误: ${error.message}`);
            }
        }

        // 页面加载完成后自动运行一次测试
        document.addEventListener('DOMContentLoaded', () => {
            debugLog('页面加载完成，可以开始测试');
        });
    </script>
</body>
</html>