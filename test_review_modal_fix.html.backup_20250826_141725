<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>复盘模态框修复测试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <div class="container mt-4">
        <h2>复盘模态框修复测试</h2>
        
        <div class="card">
            <div class="card-body">
                <button class="btn btn-primary" onclick="testCheckExistingReview()">测试检查现有记录</button>
                <button class="btn btn-secondary" onclick="testCreateNewReview()">测试创建新记录</button>
                <button class="btn btn-success" onclick="testUpdateExistingReview()">测试更新现有记录</button>
            </div>
        </div>
        
        <!-- 模拟复盘表单 -->
        <div class="card mt-4">
            <div class="card-header">
                <h5>模拟复盘表单</h5>
            </div>
            <div class="card-body">
                <input type="hidden" id="review-id">
                <input type="hidden" id="review-stock-code" value="000001">
                
                <div class="mb-3">
                    <label class="form-label">复盘日期</label>
                    <input type="date" class="form-control" id="review-date" value="2025-01-21">
                </div>
                
                <div class="mb-3">
                    <label class="form-label">持仓天数</label>
                    <input type="number" class="form-control" id="holding-days" value="5">
                </div>
                
                <div class="mb-3">
                    <label class="form-label">当前价格</label>
                    <input type="number" class="form-control" id="current-price-input" value="10.50" step="0.01">
                </div>
                
                <div class="mb-3">
                    <label class="form-label">决策</label>
                    <select class="form-control" id="decision">
                        <option value="hold">继续持有</option>
                        <option value="sell">卖出</option>
                        <option value="add">加仓</option>
                    </select>
                </div>
                
                <div class="mb-3">
                    <label class="form-label">决策理由</label>
                    <textarea class="form-control" id="reason">测试理由</textarea>
                </div>
                
                <div class="mb-3">
                    <label class="form-label">分析</label>
                    <textarea class="form-control" id="analysis">测试分析</textarea>
                </div>
                
                <!-- 评分项 -->
                <div class="mb-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="price-up-score">
                        <label class="form-check-label">价格上涨</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="bbi-score">
                        <label class="form-check-label">BBI指标</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="volume-score">
                        <label class="form-check-label">成交量</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="trend-score">
                        <label class="form-check-label">趋势</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="j-score">
                        <label class="form-check-label">J值</label>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-header">
                <h5>测试结果</h5>
            </div>
            <div class="card-body">
                <pre id="test-output" style="background: #f8f9fa; padding: 10px; max-height: 400px; overflow-y: auto;"></pre>
            </div>
        </div>
    </div>

    <script>
        function log(message) {
            const output = document.getElementById('test-output');
            const timestamp = new Date().toLocaleTimeString();
            output.textContent += `[${timestamp}] ${message}\n`;
            output.scrollTop = output.scrollHeight;
        }

        async function checkAndLoadExistingReview(stockCode, reviewDate) {
            log(`🔍 检查现有复盘记录: ${stockCode}, ${reviewDate}`);
            
            try {
                const response = await axios.get('http://localhost:5001/api/reviews');
                
                if (!response.data.success || !response.data.data?.reviews) {
                    log('⚠️ 复盘记录数据格式错误');
                    return null;
                }
                
                const existingReview = response.data.data.reviews.find(review => 
                    review.stock_code === stockCode && review.review_date === reviewDate
                );
                
                if (existingReview) {
                    log(`✅ 找到现有复盘记录: ID=${existingReview.id}`);
                    
                    // 设置复盘ID
                    const reviewIdField = document.getElementById('review-id');
                    if (reviewIdField) {
                        reviewIdField.value = existingReview.id;
                        log(`🆔 设置复盘ID: ${existingReview.id}`);
                    }
                    
                    return existingReview;
                } else {
                    log('ℹ️ 未找到现有复盘记录，将创建新记录');
                    
                    // 清空复盘ID
                    const reviewIdField = document.getElementById('review-id');
                    if (reviewIdField) {
                        reviewIdField.value = '';
                    }
                    
                    return null;
                }
                
            } catch (error) {
                log(`❌ 检查现有复盘记录失败: ${error.message}`);
                return null;
            }
        }

        function collectReviewData() {
            return {
                stock_code: document.getElementById('review-stock-code').value,
                review_date: document.getElementById('review-date').value,
                holding_days: parseInt(document.getElementById('holding-days').value) || 0,
                current_price: parseFloat(document.getElementById('current-price-input').value) || null,
                decision: document.getElementById('decision').value,
                reason: document.getElementById('reason').value,
                analysis: document.getElementById('analysis').value,
                price_up_score: document.getElementById('price-up-score').checked ? 1 : 0,
                bbi_score: document.getElementById('bbi-score').checked ? 1 : 0,
                volume_score: document.getElementById('volume-score').checked ? 1 : 0,
                trend_score: document.getElementById('trend-score').checked ? 1 : 0,
                j_score: document.getElementById('j-score').checked ? 1 : 0
            };
        }

        async function testCheckExistingReview() {
            log('=== 测试检查现有记录 ===');
            
            const stockCode = document.getElementById('review-stock-code').value;
            const reviewDate = document.getElementById('review-date').value;
            
            const existingReview = await checkAndLoadExistingReview(stockCode, reviewDate);
            
            if (existingReview) {
                log('检查结果: 找到现有记录');
                log(`记录详情: ${JSON.stringify(existingReview, null, 2)}`);
            } else {
                log('检查结果: 未找到现有记录');
            }
        }

        async function testCreateNewReview() {
            log('=== 测试创建新记录 ===');
            
            // 清空review-id以确保创建新记录
            document.getElementById('review-id').value = '';
            
            const data = collectReviewData();
            const reviewId = document.getElementById('review-id').value || null;
            
            log(`准备${reviewId ? '更新' : '创建'}记录`);
            log(`数据: ${JSON.stringify(data, null, 2)}`);
            
            try {
                const method = reviewId ? 'PUT' : 'POST';
                const url = reviewId ? `/api/reviews/${reviewId}` : '/api/reviews';
                
                const response = await axios({
                    method: method,
                    url: `http://localhost:5001${url}`,
                    data: data,
                    headers: { 'Content-Type': 'application/json' }
                });
                
                log(`✅ ${reviewId ? '更新' : '创建'}成功!`);
                log(`响应: ${JSON.stringify(response.data, null, 2)}`);
                
            } catch (error) {
                log(`❌ ${reviewId ? '更新' : '创建'}失败: ${error.response?.data?.error?.message || error.message}`);
            }
        }

        async function testUpdateExistingReview() {
            log('=== 测试更新现有记录 ===');
            
            // 首先检查现有记录
            const stockCode = document.getElementById('review-stock-code').value;
            const reviewDate = document.getElementById('review-date').value;
            
            const existingReview = await checkAndLoadExistingReview(stockCode, reviewDate);
            
            if (!existingReview) {
                log('❌ 没有找到现有记录，无法测试更新');
                return;
            }
            
            // 修改一些数据
            document.getElementById('holding-days').value = parseInt(document.getElementById('holding-days').value) + 1;
            document.getElementById('reason').value = '更新后的理由';
            
            const data = collectReviewData();
            const reviewId = document.getElementById('review-id').value;
            
            log(`准备更新记录 ID: ${reviewId}`);
            log(`更新数据: ${JSON.stringify(data, null, 2)}`);
            
            try {
                const response = await axios.put(
                    `http://localhost:5001/api/reviews/${reviewId}`,
                    data,
                    { headers: { 'Content-Type': 'application/json' } }
                );
                
                log('✅ 更新成功!');
                log(`响应: ${JSON.stringify(response.data, null, 2)}`);
                
            } catch (error) {
                log(`❌ 更新失败: ${error.response?.data?.error?.message || error.message}`);
            }
        }

        // 页面加载时初始化
        document.addEventListener('DOMContentLoaded', function() {
            log('测试页面已加载，可以开始测试...');
        });
    </script>
</body>
</html>