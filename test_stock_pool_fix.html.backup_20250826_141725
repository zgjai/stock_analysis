<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>股票池修复测试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <div class="container mt-4">
        <h2>股票池API测试</h2>
        
        <div class="row">
            <div class="col-12">
                <button class="btn btn-primary" onclick="testStockPoolAPI()">测试股票池API</button>
                <button class="btn btn-success" onclick="testWithMockData()">测试模拟数据</button>
            </div>
        </div>
        
        <div class="row mt-4">
            <div class="col-12">
                <div id="test-results" class="alert alert-info">
                    点击按钮开始测试...
                </div>
            </div>
        </div>
        
        <div class="row mt-4">
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header">
                        <h5>待观测池</h5>
                    </div>
                    <div class="card-body">
                        <div id="watch-pool">
                            <div class="text-center text-muted py-4">
                                <i class="fas fa-spinner fa-spin"></i> 等待测试...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header">
                        <h5>待买入池</h5>
                    </div>
                    <div class="card-body">
                        <div id="buy-pool">
                            <div class="text-center text-muted py-4">
                                <i class="fas fa-spinner fa-spin"></i> 等待测试...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/static/js/api.js"></script>
    <script>
        let stockPoolData = [];

        // 测试股票池API
        async function testStockPoolAPI() {
            const resultsDiv = document.getElementById('test-results');
            resultsDiv.className = 'alert alert-info';
            resultsDiv.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 正在测试API...';
            
            try {
                console.log('开始测试股票池API...');
                const response = await apiClient.getStockPool();
                console.log('API响应:', response);
                
                if (response.success) {
                    // 处理API返回的数据结构 - 修复后的逻辑
                    const data = response.data || {};
                    stockPoolData = data.items || data || [];
                    
                    console.log('处理后的stockPoolData:', stockPoolData);
                    console.log('stockPoolData是否为数组:', Array.isArray(stockPoolData));
                    
                    if (Array.isArray(stockPoolData)) {
                        resultsDiv.className = 'alert alert-success';
                        resultsDiv.innerHTML = `
                            <h6>✅ API测试成功!</h6>
                            <p>数据类型: ${Array.isArray(stockPoolData) ? '数组' : typeof stockPoolData}</p>
                            <p>数据长度: ${stockPoolData.length}</p>
                            <p>原始响应结构: ${JSON.stringify(Object.keys(response.data || {}))}</p>
                        `;
                        
                        // 渲染股票池
                        renderStockPools();
                    } else {
                        throw new Error('数据不是数组格式');
                    }
                } else {
                    throw new Error(response.error?.message || 'API返回失败');
                }
            } catch (error) {
                console.error('API测试失败:', error);
                resultsDiv.className = 'alert alert-danger';
                resultsDiv.innerHTML = `
                    <h6>❌ API测试失败</h6>
                    <p>错误: ${error.message}</p>
                `;
            }
        }

        // 测试模拟数据
        function testWithMockData() {
            const resultsDiv = document.getElementById('test-results');
            
            // 模拟API返回的数据结构
            const mockResponse = {
                success: true,
                data: {
                    items: [
                        {
                            id: 1,
                            stock_code: '000001',
                            stock_name: '平安银行',
                            pool_type: 'watch',
                            status: 'active',
                            target_price: 12.50,
                            add_reason: '技术面看好',
                            created_at: '2024-01-15T10:30:00'
                        },
                        {
                            id: 2,
                            stock_code: '000002',
                            stock_name: '万科A',
                            pool_type: 'buy_ready',
                            status: 'active',
                            target_price: 15.80,
                            add_reason: '基本面强劲',
                            created_at: '2024-01-16T14:20:00'
                        }
                    ],
                    total: 2
                }
            };
            
            console.log('使用模拟数据测试...');
            console.log('模拟响应:', mockResponse);
            
            // 使用修复后的逻辑处理数据
            const data = mockResponse.data || {};
            stockPoolData = data.items || data || [];
            
            console.log('处理后的stockPoolData:', stockPoolData);
            console.log('stockPoolData是否为数组:', Array.isArray(stockPoolData));
            
            if (Array.isArray(stockPoolData)) {
                resultsDiv.className = 'alert alert-success';
                resultsDiv.innerHTML = `
                    <h6>✅ 模拟数据测试成功!</h6>
                    <p>数据类型: ${Array.isArray(stockPoolData) ? '数组' : typeof stockPoolData}</p>
                    <p>数据长度: ${stockPoolData.length}</p>
                    <p>filter方法可用: ${typeof stockPoolData.filter === 'function' ? '是' : '否'}</p>
                `;
                
                // 渲染股票池
                renderStockPools();
            } else {
                resultsDiv.className = 'alert alert-danger';
                resultsDiv.innerHTML = `
                    <h6>❌ 模拟数据测试失败</h6>
                    <p>数据不是数组格式</p>
                `;
            }
        }

        // 渲染股票池
        function renderStockPools() {
            try {
                console.log('开始渲染股票池...');
                console.log('stockPoolData:', stockPoolData);
                
                const watchPool = stockPoolData.filter(stock => stock.pool_type === 'watch' && stock.status === 'active');
                const buyPool = stockPoolData.filter(stock => stock.pool_type === 'buy_ready' && stock.status === 'active');
                
                console.log('待观测池:', watchPool);
                console.log('待买入池:', buyPool);
                
                renderPoolSection('watch-pool', watchPool, 'watch');
                renderPoolSection('buy-pool', buyPool, 'buy_ready');
                
                console.log('股票池渲染完成');
            } catch (error) {
                console.error('渲染股票池失败:', error);
                document.getElementById('test-results').className = 'alert alert-danger';
                document.getElementById('test-results').innerHTML = `
                    <h6>❌ 渲染失败</h6>
                    <p>错误: ${error.message}</p>
                `;
            }
        }

        // 渲染单个池区域
        function renderPoolSection(containerId, stocks, poolType) {
            const container = document.getElementById(containerId);
            
            if (stocks.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-inbox"></i>
                        <p class="mb-0 mt-2">暂无股票</p>
                    </div>
                `;
                return;
            }
            
            const stocksHtml = stocks.map(stock => `
                <div class="stock-item border rounded p-3 mb-2">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-center mb-2">
                                <h6 class="mb-0 me-2">${stock.stock_code}</h6>
                                <span class="text-muted">${stock.stock_name}</span>
                            </div>
                            ${stock.target_price ? `
                                <div class="mb-1">
                                    <small class="text-muted">目标价位:</small>
                                    <span class="badge bg-light text-dark">¥${parseFloat(stock.target_price).toFixed(2)}</span>
                                </div>
                            ` : ''}
                            <div class="mb-1">
                                <small class="text-muted">添加原因:</small>
                                <span class="text-sm">${stock.add_reason || '无'}</span>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
            
            container.innerHTML = stocksHtml;
        }

        // 格式化日期时间
        function formatDateTime(dateString) {
            if (!dateString) return '无';
            const date = new Date(dateString);
            return date.toLocaleString('zh-CN');
        }
    </script>
</body>
</html>