{% extends "base.html" %}

{% block title %}复盘分析 - 股票交易记录系统{% endblock %}

{% block breadcrumb_items %}
<li class="breadcrumb-item active">复盘分析</li>
{% endblock %}

{% block page_title %}复盘分析{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/mobile-optimizations.css') }}">
<style>
body {
    background-color: #f8f9fa;
}

/* 浮盈计算器样式 */
.floating-profit-container {
    position: relative;
}

.floating-profit-container.profit {
    background-color: rgba(25, 135, 84, 0.1);
    border-radius: 4px;
    padding: 2px 4px;
}

.floating-profit-container.loss {
    background-color: rgba(220, 53, 69, 0.1);
    border-radius: 4px;
    padding: 2px 4px;
}

.floating-profit-container.neutral {
    background-color: rgba(108, 117, 125, 0.1);
    border-radius: 4px;
    padding: 2px 4px;
}

#floating-profit-ratio {
    font-size: 1.1em;
    font-weight: bold;
}

#current-price-input:focus {
    border-color: #0d6efd;
    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
}

.floating-profit-error {
    animation: shake 0.5s ease-in-out;
}

@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
}

/* 持仓天数编辑样式 */
.holding-days-editable-container {
    position: relative;
}

.holding-days-edit-indicator {
    position: absolute;
    right: 0;
    top: -20px;
    font-size: 0.75rem;
}

.holding-days-container {
    position: relative;
    cursor: pointer;
    transition: all 0.2s ease;
}

.holding-days-container:hover {
    background-color: rgba(0, 123, 255, 0.05);
    border-radius: 4px;
    padding: 2px 4px;
}

.holding-days-container.editing {
    background-color: rgba(0, 123, 255, 0.1);
    border-radius: 4px;
    padding: 2px 4px;
}

.holding-days-display {
    font-weight: bold;
    color: #495057;
}

.holding-days-input {
    width: 60px;
    padding: 2px 6px;
    border: 1px solid #007bff;
    border-radius: 3px;
    font-size: 0.875rem;
    text-align: center;
}

.holding-days-actions {
    display: none;
    position: absolute;
    top: -25px;
    right: 0;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 2px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    z-index: 10;
}

.holding-days-container.editing .holding-days-actions {
    display: flex;
    gap: 2px;
}

.holding-days-btn {
    padding: 2px 6px;
    font-size: 0.75rem;
    border: none;
    border-radius: 2px;
    cursor: pointer;
}

.holding-days-save {
    background-color: #28a745;
    color: white;
}

.holding-days-cancel {
    background-color: #6c757d;
    color: white;
}

/* 保存状态指示器样式 */
.save-status-indicator {
    position: relative;
}

#save-status-display {
    font-size: 0.875rem;
    transition: all 0.3s ease;
}

#save-status-display.unsaved {
    background-color: #6c757d !important;
}

#save-status-display.saving {
    background-color: #ffc107 !important;
    color: #212529;
}

#save-status-display.saved {
    background-color: #28a745 !important;
}

#save-status-display.error {
    background-color: #dc3545 !important;
}

#save-progress .progress-bar {
    background-color: #007bff;
}

/* 复盘模态框增强样式 */
.modal-body .card {
    border: 1px solid #e3e6f0;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
}

.modal-body .card-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid #e3e6f0;
    font-weight: 600;
}

.modal-footer {
    background-color: #f8f9fa;
    border-top: 1px solid #dee2e6;
}

.modal-footer .btn {
    min-width: 100px;
}

/* 持仓列表增强样式 */
.holding-item {
    transition: all 0.2s ease;
    border: 1px solid #dee2e6;
    background-color: #fff;
}

.holding-item:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
    border-color: #007bff;
}

.holding-item .fw-bold {
    font-size: 1.1rem;
}

.holding-item .text-success {
    color: #28a745 !important;
    font-weight: 600;
}

.holding-item .text-danger {
    color: #dc3545 !important;
    font-weight: 600;
}

.holding-item .btn-group-vertical .btn {
    margin-bottom: 0.25rem;
    font-size: 0.875rem;
    padding: 0.375rem 0.75rem;
}

.holding-item .btn-group-vertical .btn:last-child {
    margin-bottom: 0;
}

/* 加载状态增强 */
.loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    border-radius: inherit;
}

.loading-spinner {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #007bff;
    font-size: 0.875rem;
}

/* 响应式设计 */
@media (max-width: 768px) {
    .floating-profit-container {
        text-align: center;
        margin-top: 10px;
    }
    
    #floating-profit-ratio {
        font-size: 1.2em;
    }
    
    .holding-days-actions {
        position: static;
        display: flex !important;
        margin-top: 5px;
        justify-content: center;
    }
    
    .save-status-indicator {
        text-align: center;
        margin-top: 10px;
    }
    
    .holding-item .row > div {
        margin-bottom: 0.5rem;
        text-align: center;
    }
    
    .holding-item .btn-group-vertical {
        flex-direction: row;
        justify-content: center;
        gap: 0.25rem;
    }
    
    .holding-item .btn-group-vertical .btn {
        margin-bottom: 0;
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }
}
</style>
{% endblock %}

{% block content %}
<div class="review-page">
<div class="row">
    <!-- 当前持仓列表 -->
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">当前持仓</h5>
                <button class="btn btn-sm btn-outline-primary" onclick="refreshHoldings()">
                    <i class="fas fa-sync-alt"></i> 刷新
                </button>
            </div>
            <div class="card-body">
                <div id="holdings-list">
                    <div class="text-center text-muted">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        加载中...
                    </div>
                </div>
            </div>
        </div>

        <!-- 复盘记录历史 -->
        <div class="card mt-3">
            <div class="card-header">
                <h5 class="card-title mb-0">复盘记录</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-4">
                        <input type="date" class="form-control" id="review-date-filter" placeholder="选择日期">
                    </div>
                    <div class="col-md-4">
                        <input type="text" class="form-control" id="review-stock-filter" placeholder="股票代码">
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-primary" onclick="filterReviews()">筛选</button>
                        <button class="btn btn-outline-secondary ms-2" onclick="clearReviewFilters()">清除</button>
                    </div>
                </div>
                <div id="reviews-list">
                    <div class="text-center text-muted">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        加载中...
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 持仓提醒和操作面板 -->
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">持仓策略提醒</h5>
            </div>
            <div class="card-body">
                <div id="holding-alerts">
                    <div class="text-center text-muted">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        加载中...
                    </div>
                </div>
            </div>
        </div>

        <!-- 快速复盘面板 -->
        <div class="card mt-3">
            <div class="card-header">
                <h5 class="card-title mb-0">快速复盘</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">选择股票</label>
                    <select class="form-select" id="quick-review-stock">
                        <option value="">请选择持仓股票</option>
                    </select>
                </div>
                <button class="btn btn-primary w-100" onclick="openQuickReview()">开始复盘</button>
            </div>
        </div>
    </div>
</div>

<!-- 复盘评分模态框 -->
<div class="modal fade" id="reviewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">复盘评分</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="review-form">
                    <input type="hidden" id="review-stock-code">
                    <input type="hidden" id="review-id">
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">股票代码</label>
                            <input type="text" class="form-control" id="display-stock-code" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">复盘日期</label>
                            <input type="date" class="form-control" id="review-date" required>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">持仓天数</label>
                            <div class="holding-days-editable-container">
                                <input type="number" class="form-control" id="holding-days" min="1" required>
                                <div class="holding-days-edit-indicator" style="display: none;">
                                    <small class="text-muted">
                                        <i class="fas fa-edit"></i> 可编辑
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">保存状态</label>
                            <div class="save-status-indicator">
                                <span id="save-status-display" class="badge bg-secondary">
                                    <i class="fas fa-circle"></i> 未保存
                                </span>
                                <div id="save-progress" class="progress mt-1" style="height: 3px; display: none;">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                         role="progressbar" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 当前价格和浮盈计算 -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0">浮盈计算</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <label class="form-label">当前价格</label>
                                    <div class="input-group">
                                        <span class="input-group-text">¥</span>
                                        <input type="number" class="form-control" id="current-price-input" 
                                               placeholder="输入当前价格" step="0.01" min="0.01" max="9999.99">
                                    </div>
                                    <div id="floating-profit-error" class="text-danger small mt-1" style="display: none;"></div>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">成本价</label>
                                    <div class="form-control-plaintext" id="buy-price-display">--</div>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">浮盈比例</label>
                                    <div class="floating-profit-container">
                                        <div class="form-control-plaintext fw-bold" id="floating-profit-ratio">--</div>
                                        <small class="text-muted" id="profit-amount-display">--</small>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12">
                                    <div id="floating-profit-display" class="small text-muted">
                                        输入当前价格以计算浮盈比例
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0">评分标准 (每项1分，总分5分)</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="price-up-score" value="1">
                                        <label class="form-check-label" for="price-up-score">
                                            收盘价上升
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="bbi-score" value="1">
                                        <label class="form-check-label" for="bbi-score">
                                            不破BBI线
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="volume-score" value="1">
                                        <label class="form-check-label" for="volume-score">
                                            无放量阴线
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="trend-score" value="1">
                                        <label class="form-check-label" for="trend-score">
                                            趋势还在向上
                                        </label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" id="j-score" value="1">
                                        <label class="form-check-label" for="j-score">
                                            J没死叉
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3">
                                <strong>总分: <span id="total-score" class="text-primary">0</span>/5</strong>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">分析内容</label>
                        <textarea class="form-control" id="analysis" rows="3" placeholder="请输入分析内容..."></textarea>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">决策结果</label>
                            <select class="form-select" id="decision" required>
                                <option value="">请选择决策</option>
                                <option value="hold">继续持有</option>
                                <option value="sell_partial">部分止盈</option>
                                <option value="sell_all">清仓</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">决策理由</label>
                        <textarea class="form-control" id="reason" rows="2" placeholder="请输入决策理由..." required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <div class="d-flex justify-content-between align-items-center w-100">
                    <div class="save-status-info">
                        <small class="text-muted" id="last-saved-info" style="display: none;">
                            <i class="fas fa-clock"></i> 
                            最后保存: <span id="last-saved-time">--</span>
                        </small>
                        <small class="text-warning" id="unsaved-changes-warning" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i> 
                            有未保存的更改
                        </small>
                    </div>
                    <div class="modal-actions">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                        <button type="button" class="btn btn-primary" id="save-review-btn" onclick="saveReview()">
                            <span class="save-btn-text">保存复盘</span>
                            <span class="save-btn-spinner" style="display: none;">
                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                保存中...
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


</div>
{% endblock %}

{% block extra_js %}
<!-- 紧急修复脚本 - 必须最先加载 -->
<script src="{{ url_for('static', filename='js/review-emergency-fix.js') }}"></script>
<script>
// 复盘分析页面管理 - 使用全局变量避免重复声明

// 全局变量声明
let reviewModal = null;
let currentHoldings = [];
let currentReviews = [];
let reviewSaveManager = null;
let holdingDaysEditors = new Map();

// 页面初始化 - 由紧急修复脚本处理
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM加载完成，初始化复盘页面');
    
    // 初始化reviewModal
    const modalElement = document.getElementById('reviewModal');
    if (modalElement) {
        if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
            try {
                reviewModal = new bootstrap.Modal(modalElement);
                console.log('✅ reviewModal初始化成功');
            } catch (error) {
                console.error('❌ reviewModal初始化失败:', error);
            }
        }
    }
    
    // 如果紧急修复脚本已经初始化了reviewModal，使用它
    if (!reviewModal && window.reviewModal) {
        reviewModal = window.reviewModal;
        console.log('✅ 使用紧急修复脚本的reviewModal');
    }
    
    // 绑定评分复选框事件
    bindScoreCheckboxes();
    
    // 绑定保存状态事件
    bindSaveStatusEvents();
    
    // 初始化空状态
    initializeEmptyStates();
    
    // 加载所有数据
    loadAllData();
});

function initializeEmptyStates() {
    // 初始化持仓列表
    const holdingsList = document.getElementById('holdings-list');
    if (holdingsList) {
        holdingsList.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-briefcase fs-1 d-block mb-2"></i>
                <div class="mb-2">正在加载持仓数据...</div>
                <small class="text-muted">如果长时间无响应，可能是系统刚启动</small>
            </div>
        `;
    }
    
    // 初始化复盘记录
    const reviewsList = document.getElementById('reviews-list');
    if (reviewsList) {
        reviewsList.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-journal-text fs-1 d-block mb-2"></i>
                <div class="mb-2">正在加载复盘记录...</div>
                <small class="text-muted">如果长时间无响应，可能是系统刚启动</small>
            </div>
        `;
    }
    
    // 初始化持仓提醒
    const holdingAlerts = document.getElementById('holding-alerts');
    if (holdingAlerts) {
        holdingAlerts.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-bell fs-1 d-block mb-2"></i>
                <div class="mb-2">正在加载提醒...</div>
                <small class="text-muted">如果长时间无响应，可能是系统刚启动</small>
            </div>
        `;
    }
}

async function loadAllData() {
    try {
        // 并行加载所有数据，设置超时
        const timeout = 5000;
        
        await Promise.allSettled([
            Promise.race([
                loadHoldings(),
                new Promise((_, reject) => setTimeout(() => reject(new Error('持仓数据加载超时')), timeout))
            ]),
            Promise.race([
                loadReviews(),
                new Promise((_, reject) => setTimeout(() => reject(new Error('复盘记录加载超时')), timeout))
            ]),
            Promise.race([
                loadHoldingAlerts(),
                new Promise((_, reject) => setTimeout(() => reject(new Error('持仓提醒加载超时')), timeout))
            ])
        ]);
        
    } catch (error) {
        console.error('加载数据时出错:', error);
        showErrorStates();
    }
}

function showEmptyStates() {
    console.log('显示空状态，清除加载中...');
    
    // 显示持仓数据空状态
    const holdingsList = document.getElementById('holdings-list');
    if (holdingsList) {
        holdingsList.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-briefcase fs-1 d-block mb-2"></i>
                <div class="mb-2">暂无持仓数据</div>
                <small class="text-muted">请先添加交易记录</small>
                <br>
                <a href="/trading-records" class="btn btn-outline-primary btn-sm mt-2">
                    <i class="bi bi-plus-circle"></i> 添加交易记录
                </a>
            </div>
        `;
    }
    
    // 显示复盘记录空状态
    const reviewsList = document.getElementById('reviews-list');
    if (reviewsList) {
        reviewsList.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-journal-plus fs-1 d-block mb-2"></i>
                <div class="mb-2">暂无复盘记录</div>
                <small class="text-muted">开始您的第一次复盘分析</small>
            </div>
        `;
    }
    
    // 显示持仓提醒空状态
    const holdingAlerts = document.getElementById('holding-alerts');
    if (holdingAlerts) {
        holdingAlerts.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-check-circle fs-1 d-block mb-2 text-success"></i>
                <div class="mb-2">暂无提醒</div>
                <small class="text-muted">当前持仓状态良好</small>
            </div>
        `;
    }
}

function showErrorStates() {
    // 显示持仓数据错误状态
    const holdingsList = document.getElementById('holdings-list');
    if (holdingsList && holdingsList.innerHTML.includes('正在加载')) {
        holdingsList.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-exclamation-triangle fs-1 d-block mb-2 text-warning"></i>
                <div class="mb-2">暂无持仓数据</div>
                <small class="text-muted">可能还没有交易记录，或系统刚启动</small>
                <br>
                <button class="btn btn-outline-primary btn-sm mt-2" onclick="loadHoldings()">
                    <i class="bi bi-arrow-clockwise"></i> 重新加载
                </button>
            </div>
        `;
    }
    
    // 显示复盘记录错误状态
    const reviewsList = document.getElementById('reviews-list');
    if (reviewsList && reviewsList.innerHTML.includes('正在加载')) {
        reviewsList.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-journal-plus fs-1 d-block mb-2"></i>
                <div class="mb-2">暂无复盘记录</div>
                <small class="text-muted">开始您的第一次复盘分析</small>
                <br>
                <button class="btn btn-outline-primary btn-sm mt-2" onclick="loadReviews()">
                    <i class="bi bi-arrow-clockwise"></i> 重新加载
                </button>
            </div>
        `;
    }
    
    // 显示持仓提醒错误状态
    const holdingAlerts = document.getElementById('holding-alerts');
    if (holdingAlerts && holdingAlerts.innerHTML.includes('正在加载')) {
        holdingAlerts.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-info-circle fs-1 d-block mb-2"></i>
                <div class="mb-2">暂无提醒</div>
                <small class="text-muted">当前没有需要关注的持仓提醒</small>
            </div>
        `;
    }
}

function bindScoreCheckboxes() {
    const checkboxes = ['price-up-score', 'bbi-score', 'volume-score', 'trend-score', 'j-score'];
    checkboxes.forEach(id => {
        const checkbox = document.getElementById(id);
        if (checkbox) {
            checkbox.addEventListener('change', calculateTotalScore);
        }
    });
}

function calculateTotalScore() {
    const checkboxes = ['price-up-score', 'bbi-score', 'volume-score', 'trend-score', 'j-score'];
    let total = 0;
    checkboxes.forEach(id => {
        const checkbox = document.getElementById(id);
        if (checkbox && checkbox.checked) {
            total += 1;
        }
    });
    const totalScoreEl = document.getElementById('total-score');
    if (totalScoreEl) {
        totalScoreEl.textContent = total;
    }
}

function bindSaveStatusEvents() {
    // 监听表单变化
    const form = document.getElementById('review-form');
    if (form) {
        const inputs = form.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            input.addEventListener('change', updateSaveStatus);
            input.addEventListener('input', updateSaveStatus);
        });
    }
}

function updateSaveStatus(hasChanges = true) {
    const statusDisplay = document.getElementById('save-status-display');
    const unsavedWarning = document.getElementById('unsaved-changes-warning');
    
    if (hasChanges) {
        if (statusDisplay) {
            statusDisplay.className = 'badge bg-warning unsaved';
            statusDisplay.innerHTML = '<i class="fas fa-exclamation-circle"></i> 有更改';
        }
        if (unsavedWarning) {
            unsavedWarning.style.display = 'block';
        }
    } else {
        if (statusDisplay) {
            statusDisplay.className = 'badge bg-success saved';
            statusDisplay.innerHTML = '<i class="fas fa-check-circle"></i> 已保存';
        }
        if (unsavedWarning) {
            unsavedWarning.style.display = 'none';
        }
        updateLastSavedTime();
    }
}

function updateSaveProgress(show = false, progress = 0) {
    const progressEl = document.getElementById('save-progress');
    const progressBar = progressEl?.querySelector('.progress-bar');
    
    if (show) {
        if (progressEl) progressEl.style.display = 'block';
        if (progressBar) progressBar.style.width = progress + '%';
    } else {
        if (progressEl) progressEl.style.display = 'none';
    }
}

function updateLastSavedTime() {
    const lastSavedInfo = document.getElementById('last-saved-info');
    const lastSavedTime = document.getElementById('last-saved-time');
    
    if (lastSavedInfo && lastSavedTime) {
        const now = new Date();
        lastSavedTime.textContent = now.toLocaleTimeString();
        lastSavedInfo.style.display = 'block';
    }
}

function setSaveButtonState(saving = false) {
    const saveBtn = document.getElementById('save-review-btn');
    const saveText = saveBtn?.querySelector('.save-btn-text');
    const saveSpinner = saveBtn?.querySelector('.save-btn-spinner');
    
    if (saving) {
        if (saveBtn) saveBtn.disabled = true;
        if (saveText) saveText.style.display = 'none';
        if (saveSpinner) saveSpinner.style.display = 'inline-flex';
        updateSaveProgress(true, 50);
    } else {
        if (saveBtn) saveBtn.disabled = false;
        if (saveText) saveText.style.display = 'inline';
        if (saveSpinner) saveSpinner.style.display = 'none';
        updateSaveProgress(false);
    }
}

function initializeHoldingDaysEditors(holdings) {
    console.log('初始化持仓天数编辑器:', holdings);
    // 简化实现，避免复杂的编辑器逻辑
    if (!holdings || holdings.length === 0) return;
            const saveBtn = container.querySelector('.holding-days-save');
            const cancelBtn = container.querySelector('.holding-days-cancel');
            
            if (saveBtn) {
                saveBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    editor.saveChanges(container);
                });
            }
            
            if (cancelBtn) {
                cancelBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    editor.cancelEdit(container);
                });
            }
        }
    });
}

function handleModalClose(event) {
    const unsavedWarning = document.getElementById('unsaved-changes-warning');
    const hasUnsavedChanges = unsavedWarning && unsavedWarning.style.display !== 'none';
    
    if (hasUnsavedChanges) {
        const confirmClose = confirm('您有未保存的更改，确定要关闭吗？');
        if (!confirmClose) {
            event.preventDefault();
            return false;
        }
    }
    
    // 清理状态
    updateSaveStatus(false);
    setSaveButtonState(false);
    
    // 移除事件监听器
    const modalElement = document.getElementById('reviewModal');
    if (modalElement) {
        modalElement.removeEventListener('hide.bs.modal', handleModalClose);
    }
}

async function loadHoldings() {
    const container = document.getElementById('holdings-list');
    
    try {
        // 检查是否有API客户端
        if (typeof apiClient === 'undefined') {
            console.warn('API客户端未初始化，使用模拟数据');
            // 使用模拟数据
            currentHoldings = [];
            renderHoldings(currentHoldings);
            return;
        }
        
        const response = await apiClient.getHoldings();
        if (response && response.success) {
            currentHoldings = response.data || [];
            renderHoldings(currentHoldings);
            updateQuickReviewOptions(currentHoldings);
        } else {
            console.warn('获取持仓数据失败，使用空数据');
            currentHoldings = [];
            renderHoldings(currentHoldings);
        }
    } catch (error) {
        console.error('Error loading holdings:', error);
        
        // 不显示错误，而是显示空状态
        currentHoldings = [];
        renderHoldings(currentHoldings);
    }
}

function calculateProfitRatio(holding) {
    if (!holding.avg_buy_price || !holding.current_price) {
        return '--';
    }
    const ratio = ((holding.current_price - holding.avg_buy_price) / holding.avg_buy_price * 100).toFixed(2);
    return ratio + '%';
}

function getProfitClass(holding) {
    if (!holding.avg_buy_price || !holding.current_price) {
        return 'text-muted';
    }
    const ratio = (holding.current_price - holding.avg_buy_price) / holding.avg_buy_price;
    return ratio > 0 ? 'text-danger' : ratio < 0 ? 'text-success' : 'text-muted';
}

function renderHoldings(holdings) {
    const container = document.getElementById('holdings-list');
    
    if (!holdings || holdings.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-briefcase fs-1 d-block mb-2"></i>
                <div class="mb-2">暂无持仓数据</div>
                <small class="text-muted">请先添加交易记录</small>
                <br>
                <a href="/trading-records" class="btn btn-outline-primary btn-sm mt-2">
                    <i class="bi bi-plus-circle"></i> 添加交易记录
                </a>
            </div>
        `;
        return;
    }
    
    try {
        const html = holdings.map(holding => `
            <div class="holding-item border rounded p-3 mb-3">
                <div class="row align-items-center">
                    <div class="col-md-3">
                        <h6 class="mb-1">${holding.stock_code}</h6>
                        <small class="text-muted">${holding.stock_name || ''}</small>
                    </div>
                    <div class="col-md-2">
                        <div class="text-center">
                            <div class="fw-bold">¥${holding.current_price || '--'}</div>
                            <small class="text-muted">当前价</small>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="text-center">
                            <div class="fw-bold">¥${holding.avg_buy_price ? holding.avg_buy_price.toFixed(2) : (holding.avg_price ? holding.avg_price.toFixed(2) : '--')}</div>
                            <small class="text-muted">成本价</small>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="text-center">
                            <div class="fw-bold ${getProfitClass(holding)}">
                                ${calculateProfitRatio(holding)}
                            </div>
                            <small class="text-muted">盈亏</small>
                        </div>
                    </div>
                    <div class="col-md-1">
                        <div class="text-center holding-days-container" data-stock-code="${holding.stock_code}">
                            <div class="holding-days-display" title="点击编辑持仓天数">
                                ${holding.holding_days || 0}天
                            </div>
                            <div class="holding-days-actions">
                                <button class="holding-days-btn holding-days-save" title="保存">
                                    <i class="fas fa-check"></i>
                                </button>
                                <button class="holding-days-btn holding-days-cancel" title="取消">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="btn-group-vertical btn-group-sm w-100">
                            <button class="btn btn-outline-primary btn-sm" onclick="openReviewModal('${holding.stock_code}')">
                                复盘
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `).join('');
        
        container.innerHTML = html;
        
        // 初始化持仓天数编辑器
        initializeHoldingDaysEditors(holdings);
    } catch (error) {
        console.error('Error rendering holdings:', error);
        container.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-exclamation-triangle fs-1 d-block mb-2 text-danger"></i>
                <div class="mb-2">数据渲染失败</div>
                <button class="btn btn-outline-primary btn-sm" onclick="loadHoldings()">
                    <i class="bi bi-arrow-clockwise"></i> 重新加载
                </button>
            </div>
        `;
    }
}

function updateQuickReviewOptions(holdings) {
    const select = document.getElementById('quick-review-stock');
    if (!select) return;
    
    select.innerHTML = '<option value="">请选择持仓股票</option>';
    
    if (holdings && holdings.length > 0) {
        holdings.forEach(holding => {
            const option = document.createElement('option');
            option.value = holding.stock_code;
            option.textContent = `${holding.stock_code} ${holding.stock_name || ''}`;
            select.appendChild(option);
        });
    }
}

async function loadHoldingAlerts() {
    const container = document.getElementById('holding-alerts');
    
    try {
        if (typeof apiClient === 'undefined') {
            console.warn('API客户端未初始化，使用空数据');
            renderHoldingAlerts([]);
            return;
        }
        
        const response = await apiClient.getHoldingAlerts();
        if (response && response.success) {
            renderHoldingAlerts(response.data || []);
        } else {
            console.warn('获取持仓提醒失败，使用空数据');
            renderHoldingAlerts([]);
        }
    } catch (error) {
        console.error('Error loading holding alerts:', error);
        
        // 不显示错误，而是显示空状态
        renderHoldingAlerts([]);
    }
}

function renderHoldingAlerts(alerts) {
    const container = document.getElementById('holding-alerts');
    
    if (!alerts || alerts.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-check-circle fs-1 d-block mb-2 text-success"></i>
                <div class="mb-2">暂无提醒</div>
                <small class="text-muted">当前持仓状态良好</small>
            </div>
        `;
        return;
    }
    
    try {
        const html = alerts.map(alert => `
            <div class="alert alert-${getAlertClass(alert.alert_type)} alert-sm mb-2">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <strong>${alert.stock_code}</strong>
                        <div class="small">${alert.alert_message}</div>
                        ${alert.sell_ratio ? `<div class="small text-muted">建议卖出: ${(alert.sell_ratio * 100).toFixed(0)}%</div>` : ''}
                    </div>
                    <span class="badge bg-${getAlertClass(alert.alert_type)}">${getAlertTypeText(alert.alert_type)}</span>
                </div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    } catch (error) {
        console.error('Error rendering holding alerts:', error);
        container.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-exclamation-triangle fs-1 d-block mb-2 text-danger"></i>
                <div class="mb-2">提醒数据渲染失败</div>
            </div>
        `;
    }
}

async function loadReviews() {
    const container = document.getElementById('reviews-list');
    
    try {
        if (typeof apiClient === 'undefined') {
            console.warn('API客户端未初始化，使用空数据');
            currentReviews = [];
            renderReviews(currentReviews);
            return;
        }
        
        const response = await apiClient.getReviews();
        if (response && response.success) {
            // 处理不同的数据结构
            let reviewsData = response.data;
            
            // 如果data是对象且包含reviews数组，使用reviews数组
            if (reviewsData && typeof reviewsData === 'object' && reviewsData.reviews) {
                reviewsData = reviewsData.reviews;
            }
            // 如果data不是数组，转换为空数组
            if (!Array.isArray(reviewsData)) {
                reviewsData = [];
            }
            
            currentReviews = reviewsData;
            renderReviews(currentReviews);
        } else {
            console.warn('获取复盘记录失败，使用空数据');
            currentReviews = [];
            renderReviews(currentReviews);
        }
    } catch (error) {
        console.error('Error loading reviews:', error);
        
        // 不显示错误，而是显示空状态
        currentReviews = [];
        renderReviews(currentReviews);
    }
}

function renderReviews(reviews) {
    const container = document.getElementById('reviews-list');
    
    // 确保reviews是数组
    if (!Array.isArray(reviews)) {
        console.error('Error rendering reviews: reviews.map is not a function', reviews);
        container.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-exclamation-triangle fs-1 d-block mb-2 text-warning"></i>
                <div class="mb-2">数据格式错误</div>
                <small class="text-muted">复盘记录数据不是数组格式</small>
                <br>
                <button class="btn btn-outline-primary btn-sm mt-2" onclick="loadReviews()">
                    <i class="bi bi-arrow-clockwise"></i> 重新加载
                </button>
            </div>
        `;
        return;
    }
    
    if (reviews.length === 0) {
        container.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-journal-plus fs-1 d-block mb-2"></i>
                <div class="mb-2">暂无复盘记录</div>
                <small class="text-muted">开始您的第一次复盘分析</small>
            </div>
        `;
        return;
    }
    
    try {
        const html = reviews.map(review => `
            <div class="review-item border rounded p-3 mb-2">
                <div class="row align-items-center">
                    <div class="col-md-2">
                        <strong>${review.stock_code || '未知'}</strong>
                        <div class="small text-muted">${review.review_date || ''}</div>
                    </div>
                    <div class="col-md-1">
                        <span class="badge bg-primary">${review.total_score || 0}/5</span>
                    </div>
                    <div class="col-md-2">
                        <span class="badge bg-${getDecisionClass(review.decision)}">${getDecisionText(review.decision)}</span>
                    </div>
                    <div class="col-md-1">
                        <small class="text-muted">${review.holding_days || 0}天</small>
                    </div>
                    <div class="col-md-4">
                        <small class="text-muted">${review.analysis || '无分析内容'}</small>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-outline-primary btn-sm" onclick="editReview(${review.id || 0})">
                            编辑
                        </button>
                    </div>
                </div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    } catch (error) {
        console.error('Error rendering reviews:', error);
        container.innerHTML = `
            <div class="text-center text-muted py-4">
                <i class="bi bi-exclamation-triangle fs-1 d-block mb-2 text-danger"></i>
                <div class="mb-2">复盘记录渲染失败</div>
                <small class="text-muted">${error.message}</small>
                <br>
                <button class="btn btn-outline-primary btn-sm mt-2" onclick="loadReviews()">
                    <i class="bi bi-arrow-clockwise"></i> 重新加载
                </button>
            </div>
        `;
    }
}

// 工具函数
function getAlertClass(alertType) {
    switch (alertType) {
        case 'sell_all': return 'danger';
        case 'sell_partial': return 'warning';
        default: return 'info';
    }
}

function getAlertTypeText(alertType) {
    switch (alertType) {
        case 'sell_all': return '清仓';
        case 'sell_partial': return '部分卖出';
        default: return '持有';
    }
}

function getDecisionClass(decision) {
    switch (decision) {
        case 'hold': return 'success';
        case 'sell_partial': return 'warning';
        case 'sell_all': return 'danger';
        default: return 'secondary';
    }
}

function getDecisionText(decision) {
    switch (decision) {
        case 'hold': return '持有';
        case 'sell_partial': return '部分止盈';
        case 'sell_all': return '清仓';
        default: return '未知';
    }
}

// 模态框相关函数
function openReviewModal(stockCode = '') {
    // 确保reviewModal已初始化
    if (!reviewModal) {
        console.log('reviewModal未初始化，尝试初始化...');
        
        // 尝试从全局变量获取或初始化
        if (typeof window.initializeReviewModal === 'function') {
            window.initializeReviewModal();
            reviewModal = window.reviewModal;
        }
        
        // 如果还是没有，尝试直接创建Bootstrap Modal
        if (!reviewModal) {
            const modalElement = document.getElementById('reviewModal');
            if (modalElement && typeof bootstrap !== 'undefined' && bootstrap.Modal) {
                try {
                    reviewModal = new bootstrap.Modal(modalElement);
                    console.log('Bootstrap Modal初始化成功');
                } catch (error) {
                    console.error('Bootstrap Modal初始化失败:', error);
                }
            }
        }
        
        // 最后的后备方案
        if (!reviewModal) {
            console.error('Review modal not initialized');
            alert('复盘模态框初始化失败，请刷新页面重试');
            return;
        }
    }
    
    // 重置表单
    const form = document.getElementById('review-form');
    if (form) form.reset();
    
    const reviewId = document.getElementById('review-id');
    if (reviewId) reviewId.value = '';
    
    const totalScore = document.getElementById('total-score');
    if (totalScore) totalScore.textContent = '0';
    
    if (stockCode) {
        const stockCodeInput = document.getElementById('review-stock-code');
        const displayStockCode = document.getElementById('display-stock-code');
        
        if (stockCodeInput) stockCodeInput.value = stockCode;
        if (displayStockCode) displayStockCode.value = stockCode;
        
        // 从持仓数据中获取持仓天数和买入价格
        const holding = currentHoldings.find(h => h.stock_code === stockCode);
        if (holding) {
            if (holding.holding_days) {
                const holdingDaysInput = document.getElementById('holding-days');
                if (holdingDaysInput) holdingDaysInput.value = holding.holding_days;
            }
            
            // 初始化浮盈计算器
            initializeFloatingProfitCalculator(stockCode, holding.buy_price);
        }
    } else {
        // 重置浮盈计算器
        resetFloatingProfitCalculator();
    }
    
    // 设置默认日期为今天
    const reviewDate = document.getElementById('review-date');
    if (reviewDate) {
        reviewDate.value = new Date().toISOString().split('T')[0];
    }
    
    // 重置保存状态
    updateSaveStatus(false);
    
    // 初始化复盘保存管理器（如果还没有初始化）
    if (!reviewSaveManager && typeof ReviewSaveManager !== 'undefined') {
        const reviewForm = document.getElementById('review-form');
        if (reviewForm) {
            reviewSaveManager = new ReviewSaveManager(reviewForm);
        }
    }
    
    // 绑定模态框关闭事件
    const modalElement = document.getElementById('reviewModal');
    if (modalElement) {
        modalElement.addEventListener('hide.bs.modal', handleModalClose);
    }
    
    reviewModal.show();
}

function openQuickReview() {
    const stockSelect = document.getElementById('quick-review-stock');
    if (!stockSelect) return;
    
    const stockCode = stockSelect.value;
    if (!stockCode) {
        if (typeof showMessage !== 'undefined') {
            showMessage('请先选择股票', 'warning');
        } else {
            alert('请先选择股票');
        }
        return;
    }
    openReviewModal(stockCode);
}

async function refreshHoldings() {
    try {
        await Promise.all([
            loadHoldings(),
            loadHoldingAlerts()
        ]);
        
        if (typeof showMessage !== 'undefined') {
            showMessage('持仓数据已刷新', 'success');
        }
    } catch (error) {
        console.error('Error refreshing holdings:', error);
        if (typeof showMessage !== 'undefined') {
            showMessage('刷新失败，请重试', 'error');
        }
    }
}

// 保存复盘记录 - 委托给ReviewSaveManager处理
async function saveReview() {
    // 设置保存状态
    setSaveButtonState(true);
    updateSaveStatus(true);
    
    const statusDisplay = document.getElementById('save-status-display');
    if (statusDisplay) {
        statusDisplay.className = 'badge bg-warning saving';
        statusDisplay.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 保存中...';
    }
    
    try {
        // 如果ReviewSaveManager可用，使用它来处理保存
        if (typeof reviewSaveManager !== 'undefined' && reviewSaveManager) {
            await reviewSaveManager.saveReview();
            
            // 保存成功
            updateSaveStatus(false);
            setSaveButtonState(false);
            return;
        }
    } catch (error) {
        // 保存失败
        const statusDisplay = document.getElementById('save-status-display');
        if (statusDisplay) {
            statusDisplay.className = 'badge bg-danger error';
            statusDisplay.innerHTML = '<i class="fas fa-exclamation-triangle"></i> 保存失败';
        }
        setSaveButtonState(false);
        throw error;
    }
    
    // 后备方案：直接保存（保持向后兼容）
    console.warn('ReviewSaveManager不可用，使用后备保存方法');
    
    try {
        // 收集表单数据
        const stockCode = document.getElementById('review-stock-code')?.value;
        const reviewId = document.getElementById('review-id')?.value;
        const reviewDate = document.getElementById('review-date')?.value;
        const holdingDays = document.getElementById('holding-days')?.value;
        const analysis = document.getElementById('analysis')?.value;
        const decision = document.getElementById('decision')?.value;
        const reason = document.getElementById('reason')?.value;
        
        // 收集评分数据
        const priceUpScore = document.getElementById('price-up-score')?.checked ? 1 : 0;
        const bbiScore = document.getElementById('bbi-score')?.checked ? 1 : 0;
        const volumeScore = document.getElementById('volume-score')?.checked ? 1 : 0;
        const trendScore = document.getElementById('trend-score')?.checked ? 1 : 0;
        const jScore = document.getElementById('j-score')?.checked ? 1 : 0;
        
        // 收集浮盈计算数据
        const floatingProfitData = getCurrentFloatingProfitData();
        
        // 验证必填字段
        if (!stockCode || !reviewDate || !holdingDays || !decision || !reason) {
            if (typeof showMessage !== 'undefined') {
                showMessage('请填写所有必填字段', 'warning');
            }
            return;
        }
        
        // 构建保存数据
        const reviewData = {
            stock_code: stockCode,
            review_date: reviewDate,
            holding_days: parseInt(holdingDays),
            current_price: floatingProfitData.current_price,
            floating_profit_ratio: floatingProfitData.floating_profit_ratio,
            buy_price: floatingProfitData.buy_price,
            price_up_score: priceUpScore,
            bbi_score: bbiScore,
            volume_score: volumeScore,
            trend_score: trendScore,
            j_score: jScore,
            analysis: analysis,
            decision: decision,
            reason: reason
        };
        
        console.log('准备保存复盘数据:', reviewData);
        
        // 检查API客户端是否可用
        if (typeof apiClient === 'undefined') {
            throw new Error('API客户端未初始化');
        }
        
        // 调用保存API
        const response = await apiClient.saveReview(reviewData, reviewId || null);
        
        if (response && response.success) {
            // 保存成功
            updateSaveStatus(false);
            setSaveButtonState(false);
            
            if (typeof showMessage !== 'undefined') {
                showMessage('复盘记录保存成功', 'success');
            }
            
            // 关闭模态框
            if (reviewModal) {
                reviewModal.hide();
            }
            
            // 刷新复盘记录列表
            await loadReviews();
        } else {
            throw new Error(response?.error?.message || '保存失败');
        }
        
    } catch (error) {
        console.error('保存复盘记录失败:', error);
        
        // 保存失败状态
        const statusDisplay = document.getElementById('save-status-display');
        if (statusDisplay) {
            statusDisplay.className = 'badge bg-danger error';
            statusDisplay.innerHTML = '<i class="fas fa-exclamation-triangle"></i> 保存失败';
        }
        setSaveButtonState(false);
        
        let message = '保存失败';
        if (error.code === 'NETWORK_ERROR') {
            message = '网络连接失败，请重试';
        } else if (error.code === 'VALIDATION_ERROR') {
            message = '数据验证失败，请检查输入';
        } else if (error.message) {
            message = error.message;
        }
        
        if (typeof showMessage !== 'undefined') {
            showMessage(message, 'error');
        }
    }
}

async function editReview(reviewId) {
    console.log('编辑复盘记录功能需要后端API支持');
    if (typeof showMessage !== 'undefined') {
        showMessage('编辑功能需要后端API支持', 'info');
    }
}



function filterReviews() {
    const dateFilter = document.getElementById('review-date-filter');
    const stockFilter = document.getElementById('review-stock-filter');
    
    if (!dateFilter || !stockFilter) return;
    
    const dateValue = dateFilter.value;
    const stockValue = stockFilter.value.toUpperCase();
    
    let filteredReviews = currentReviews;
    
    if (dateValue) {
        filteredReviews = filteredReviews.filter(review => review.review_date === dateValue);
    }
    
    if (stockValue) {
        filteredReviews = filteredReviews.filter(review => 
            review.stock_code.includes(stockValue)
        );
    }
    
    renderReviews(filteredReviews);
}

function clearReviewFilters() {
    const dateFilter = document.getElementById('review-date-filter');
    const stockFilter = document.getElementById('review-stock-filter');
    
    if (dateFilter) dateFilter.value = '';
    if (stockFilter) stockFilter.value = '';
    
    renderReviews(currentReviews);
}

// 简化的持仓天数编辑器初始化
function initializeHoldingDaysEditors(holdings) {
    console.log('初始化持仓天数编辑器:', holdings);
    // 暂时简化实现，避免复杂逻辑导致错误
    if (!holdings || holdings.length === 0) return;
    
    // 简单的点击编辑功能
    holdings.forEach(holding => {
        const container = document.querySelector(`.holding-days-container[data-stock-code="${holding.stock_code}"]`);
        if (container) {
            const display = container.querySelector('.holding-days-display');
            if (display) {
                display.addEventListener('click', () => {
                    console.log(`点击编辑持仓天数: ${holding.stock_code}`);
                    // 简单的编辑功能，暂时只显示提示
                    const newDays = prompt(`请输入${holding.stock_code}的持仓天数:`, holding.holding_days || 1);
                    if (newDays && !isNaN(newDays)) {
                        display.textContent = `${newDays}天`;
                    }
                });
            }
        }
    });
}

// 监听持仓天数更新事件，刷新相关数据
document.addEventListener('holdingDaysUpdated', function(event) {
    console.log('Holding days updated, refreshing data...', event.detail);
    
    // 可以选择性地刷新持仓数据或其他相关数据
    // loadHoldings();
});

// 浮盈计算器相关函数
let currentFloatingProfitCalculator = null;

/**
 * 初始化浮盈计算器
 */
function initializeFloatingProfitCalculator(stockCode, buyPrice = null) {
    try {
        // 清理之前的计算器
        if (currentFloatingProfitCalculator) {
            currentFloatingProfitCalculator.destroy();
        }
        
        // 创建新的计算器实例
        currentFloatingProfitCalculator = floatingProfitManager.getCalculator(stockCode, buyPrice);
        
        console.log('浮盈计算器初始化成功:', stockCode, buyPrice);
    } catch (error) {
        console.error('浮盈计算器初始化失败:', error);
    }
}

/**
 * 重置浮盈计算器
 */
function resetFloatingProfitCalculator() {
    try {
        // 清理当前计算器
        if (currentFloatingProfitCalculator) {
            currentFloatingProfitCalculator.destroy();
            currentFloatingProfitCalculator = null;
        }
        
        // 重置UI元素
        const priceInput = document.getElementById('current-price-input');
        const ratioDisplay = document.getElementById('floating-profit-ratio');
        const buyPriceDisplay = document.getElementById('buy-price-display');
        const profitAmountDisplay = document.getElementById('profit-amount-display');
        const errorDisplay = document.getElementById('floating-profit-error');
        
        if (priceInput) priceInput.value = '';
        if (ratioDisplay) {
            ratioDisplay.textContent = '--';
            ratioDisplay.className = 'form-control-plaintext fw-bold text-muted';
        }
        if (buyPriceDisplay) buyPriceDisplay.textContent = '--';
        if (profitAmountDisplay) {
            profitAmountDisplay.textContent = '--';
            profitAmountDisplay.className = 'text-muted';
        }
        if (errorDisplay) {
            errorDisplay.style.display = 'none';
            errorDisplay.textContent = '';
        }
        
        console.log('浮盈计算器已重置');
    } catch (error) {
        console.error('浮盈计算器重置失败:', error);
    }
}

/**
 * 获取当前浮盈计算结果（用于保存复盘时）
 */
function getCurrentFloatingProfitData() {
    if (currentFloatingProfitCalculator) {
        return currentFloatingProfitCalculator.getCalculationResult();
    }
    
    // 如果没有计算器，从UI元素获取数据
    const priceInput = document.getElementById('current-price-input');
    const currentPrice = priceInput ? parseFloat(priceInput.value) : null;
    
    return {
        current_price: currentPrice,
        floating_profit_ratio: null,
        buy_price: null
    };
}

// ReviewSaveManager 事件监听器
document.addEventListener('reviewSaved', function(event) {
    console.log('复盘保存成功事件:', event.detail);
    
    // 关闭模态框
    if (reviewModal) {
        reviewModal.hide();
    }
    
    // 刷新复盘记录列表
    if (typeof loadReviews === 'function') {
        setTimeout(() => loadReviews(), 500);
    }
});

document.addEventListener('reviewSaveError', function(event) {
    console.error('复盘保存失败事件:', event.detail);
});

// 清理函数，在页面卸载时调用
window.addEventListener('beforeunload', function() {
    console.log('页面卸载，清理资源');
    
    if (typeof floatingProfitManager !== 'undefined') {
        floatingProfitManager.clearAll();
    }
    
    if (typeof reviewSaveManager !== 'undefined' && reviewSaveManager) {
        reviewSaveManager.destroy();
    }
});
</script>
{% endblock %}