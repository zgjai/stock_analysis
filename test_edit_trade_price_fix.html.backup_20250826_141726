<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>测试编辑交易记录价格修复</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <div class="container mt-4">
        <h2>测试编辑交易记录价格修复</h2>
        
        <div class="alert alert-info">
            <h5>修复内容：</h5>
            <ul>
                <li>改进了后端价格字段验证逻辑</li>
                <li>增强了前端数据处理和验证</li>
                <li>支持编辑时的部分字段更新</li>
                <li>添加了更详细的错误提示</li>
            </ul>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5>测试场景</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <button class="btn btn-primary mb-2 w-100" onclick="testCreateTrade()">
                                    1. 测试创建交易记录
                                </button>
                                <button class="btn btn-success mb-2 w-100" onclick="testUpdateTradeNormal()">
                                    2. 测试正常更新价格
                                </button>
                                <button class="btn btn-warning mb-2 w-100" onclick="testUpdateTradeEmptyPrice()">
                                    3. 测试空价格更新
                                </button>
                                <button class="btn btn-info mb-2 w-100" onclick="testUpdateTradePartial()">
                                    4. 测试部分字段更新
                                </button>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-secondary mb-2 w-100" onclick="testUpdateTradeZeroPrice()">
                                    5. 测试零价格更新
                                </button>
                                <button class="btn btn-dark mb-2 w-100" onclick="testUpdateTradeNegativePrice()">
                                    6. 测试负价格更新
                                </button>
                                <button class="btn btn-outline-primary mb-2 w-100" onclick="testUpdateTradeStringPrice()">
                                    7. 测试字符串价格
                                </button>
                                <button class="btn btn-outline-danger mb-2 w-100" onclick="clearTestData()">
                                    清理测试数据
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>测试状态</h5>
                    </div>
                    <div class="card-body">
                        <div id="test-status">
                            <p class="text-muted">等待测试...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">测试日志</h5>
                        <button class="btn btn-sm btn-outline-secondary" onclick="clearLog()">清空日志</button>
                    </div>
                    <div class="card-body">
                        <div id="test-log" style="font-family: monospace; white-space: pre-wrap; background: #f8f9fa; padding: 15px; border-radius: 4px; max-height: 400px; overflow-y: auto; min-height: 200px;">
                            等待测试开始...
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let testTradeId = null;
        let testResults = {
            passed: 0,
            failed: 0,
            total: 0
        };

        function log(message, type = 'info') {
            const logElement = document.getElementById('test-log');
            const timestamp = new Date().toLocaleTimeString();
            const prefix = type === 'error' ? '❌' : type === 'success' ? '✅' : type === 'warning' ? '⚠️' : 'ℹ️';
            logElement.textContent += `[${timestamp}] ${prefix} ${message}\n`;
            logElement.scrollTop = logElement.scrollHeight;
        }

        function clearLog() {
            document.getElementById('test-log').textContent = '';
            log('日志已清空');
        }

        function updateTestStatus() {
            const statusElement = document.getElementById('test-status');
            statusElement.innerHTML = `
                <div class="text-center">
                    <div class="row">
                        <div class="col-4">
                            <div class="text-success">
                                <strong>${testResults.passed}</strong><br>
                                <small>通过</small>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="text-danger">
                                <strong>${testResults.failed}</strong><br>
                                <small>失败</small>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="text-info">
                                <strong>${testResults.total}</strong><br>
                                <small>总计</small>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function recordTestResult(testName, success, message = '') {
            testResults.total++;
            if (success) {
                testResults.passed++;
                log(`${testName} - 通过${message ? ': ' + message : ''}`, 'success');
            } else {
                testResults.failed++;
                log(`${testName} - 失败${message ? ': ' + message : ''}`, 'error');
            }
            updateTestStatus();
        }

        async function testCreateTrade() {
            log('=== 开始测试创建交易记录 ===');
            
            const testData = {
                stock_code: '000001',
                stock_name: '平安银行',
                trade_type: 'buy',
                price: 12.50,
                quantity: 1000,
                reason: '测试原因',
                trade_date: new Date().toISOString().slice(0, 16)
            };

            try {
                const response = await axios.post('/api/trades', testData);
                
                if (response.data.success) {
                    testTradeId = response.data.data.id;
                    recordTestResult('创建交易记录', true, `ID: ${testTradeId}`);
                } else {
                    recordTestResult('创建交易记录', false, response.data.message);
                }
            } catch (error) {
                recordTestResult('创建交易记录', false, error.response?.data?.error?.message || error.message);
            }
        }

        async function testUpdateTradeNormal() {
            if (!testTradeId) {
                log('请先创建测试交易记录', 'warning');
                return;
            }

            log('=== 测试正常更新价格 ===');
            
            const updateData = {
                price: 13.75,
                quantity: 1200
            };

            try {
                const response = await axios.put(`/api/trades/${testTradeId}`, updateData);
                
                if (response.data.success) {
                    recordTestResult('正常更新价格', true, `新价格: ${updateData.price}`);
                } else {
                    recordTestResult('正常更新价格', false, response.data.message);
                }
            } catch (error) {
                recordTestResult('正常更新价格', false, error.response?.data?.error?.message || error.message);
            }
        }

        async function testUpdateTradeEmptyPrice() {
            if (!testTradeId) {
                log('请先创建测试交易记录', 'warning');
                return;
            }

            log('=== 测试空价格更新（应该失败）===');
            
            const updateData = {
                price: '',
                stock_name: '平安银行更新'
            };

            try {
                const response = await axios.put(`/api/trades/${testTradeId}`, updateData);
                recordTestResult('空价格更新', false, '应该失败但成功了');
            } catch (error) {
                const errorMsg = error.response?.data?.error?.message || error.message;
                if (errorMsg.includes('价格不能为空') || errorMsg.includes('price')) {
                    recordTestResult('空价格更新', true, '正确拒绝了空价格');
                } else {
                    recordTestResult('空价格更新', false, `错误信息不正确: ${errorMsg}`);
                }
            }
        }

        async function testUpdateTradePartial() {
            if (!testTradeId) {
                log('请先创建测试交易记录', 'warning');
                return;
            }

            log('=== 测试部分字段更新（不包含价格）===');
            
            const updateData = {
                stock_name: '平安银行（部分更新）',
                reason: '更新后的原因'
            };

            try {
                const response = await axios.put(`/api/trades/${testTradeId}`, updateData);
                
                if (response.data.success) {
                    recordTestResult('部分字段更新', true, '成功更新非价格字段');
                } else {
                    recordTestResult('部分字段更新', false, response.data.message);
                }
            } catch (error) {
                recordTestResult('部分字段更新', false, error.response?.data?.error?.message || error.message);
            }
        }

        async function testUpdateTradeZeroPrice() {
            if (!testTradeId) {
                log('请先创建测试交易记录', 'warning');
                return;
            }

            log('=== 测试零价格更新（应该失败）===');
            
            const updateData = {
                price: 0
            };

            try {
                const response = await axios.put(`/api/trades/${testTradeId}`, updateData);
                recordTestResult('零价格更新', false, '应该失败但成功了');
            } catch (error) {
                const errorMsg = error.response?.data?.error?.message || error.message;
                if (errorMsg.includes('必须大于0') || errorMsg.includes('price')) {
                    recordTestResult('零价格更新', true, '正确拒绝了零价格');
                } else {
                    recordTestResult('零价格更新', false, `错误信息不正确: ${errorMsg}`);
                }
            }
        }

        async function testUpdateTradeNegativePrice() {
            if (!testTradeId) {
                log('请先创建测试交易记录', 'warning');
                return;
            }

            log('=== 测试负价格更新（应该失败）===');
            
            const updateData = {
                price: -5.50
            };

            try {
                const response = await axios.put(`/api/trades/${testTradeId}`, updateData);
                recordTestResult('负价格更新', false, '应该失败但成功了');
            } catch (error) {
                const errorMsg = error.response?.data?.error?.message || error.message;
                if (errorMsg.includes('必须大于0') || errorMsg.includes('price')) {
                    recordTestResult('负价格更新', true, '正确拒绝了负价格');
                } else {
                    recordTestResult('负价格更新', false, `错误信息不正确: ${errorMsg}`);
                }
            }
        }

        async function testUpdateTradeStringPrice() {
            if (!testTradeId) {
                log('请先创建测试交易记录', 'warning');
                return;
            }

            log('=== 测试字符串价格更新 ===');
            
            const updateData = {
                price: '15.25'  // 字符串格式的价格
            };

            try {
                const response = await axios.put(`/api/trades/${testTradeId}`, updateData);
                
                if (response.data.success) {
                    recordTestResult('字符串价格更新', true, '成功转换字符串价格');
                } else {
                    recordTestResult('字符串价格更新', false, response.data.message);
                }
            } catch (error) {
                recordTestResult('字符串价格更新', false, error.response?.data?.error?.message || error.message);
            }
        }

        async function clearTestData() {
            if (!testTradeId) {
                log('没有测试数据需要清理', 'warning');
                return;
            }

            log('=== 清理测试数据 ===');
            
            try {
                const response = await axios.delete(`/api/trades/${testTradeId}`);
                
                if (response.data.success) {
                    log(`成功删除测试交易记录 ID: ${testTradeId}`, 'success');
                    testTradeId = null;
                    testResults = { passed: 0, failed: 0, total: 0 };
                    updateTestStatus();
                } else {
                    log('删除测试数据失败: ' + response.data.message, 'error');
                }
            } catch (error) {
                log('删除测试数据失败: ' + (error.response?.data?.error?.message || error.message), 'error');
            }
        }

        // 初始化
        log('测试页面已加载，可以开始测试');
        updateTestStatus();
    </script>
</body>
</html>