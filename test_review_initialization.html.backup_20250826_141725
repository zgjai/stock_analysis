<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>复盘页面初始化测试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-4">
        <h1>复盘页面初始化测试</h1>
        
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>测试控制</h5>
                    </div>
                    <div class="card-body">
                        <button class="btn btn-primary mb-2" onclick="testInitialization()">测试初始化</button>
                        <button class="btn btn-info mb-2" onclick="diagnoseReviewPage()">诊断页面</button>
                        <button class="btn btn-success mb-2" onclick="testSaveReview()">测试保存功能</button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>状态显示</h5>
                    </div>
                    <div class="card-body">
                        <div id="status-display">
                            <p>点击测试按钮查看状态</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 模拟复盘表单 -->
        <div class="card mt-4">
            <div class="card-header">
                <h5>模拟复盘表单</h5>
            </div>
            <div class="card-body">
                <form id="review-form">
                    <input type="hidden" id="review-stock-code" value="000001">
                    <input type="hidden" id="review-id">
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">股票代码</label>
                            <input type="text" class="form-control" id="display-stock-code" value="000001" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">复盘日期</label>
                            <input type="date" class="form-control" id="review-date" required>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">持仓天数</label>
                            <input type="number" class="form-control" id="holding-days" min="1" value="1" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">当前价格</label>
                            <input type="number" class="form-control" id="current-price-input" step="0.01" value="10.00">
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">决策结果</label>
                        <select class="form-select" id="decision" required>
                            <option value="">请选择决策</option>
                            <option value="hold">继续持有</option>
                            <option value="sell_partial">部分止盈</option>
                            <option value="sell_all">清仓</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">决策理由</label>
                        <textarea class="form-control" id="reason" rows="2" placeholder="请输入决策理由..." required>测试理由</textarea>
                    </div>
                    
                    <button type="button" class="btn btn-primary" id="save-review-btn" onclick="saveReview()">保存复盘</button>
                </form>
            </div>
        </div>
    </div>

    <!-- 引入必要的JavaScript文件 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- 引入项目的JavaScript文件 -->
    <script src="static/js/api.js"></script>
    <script src="static/js/review-save-manager.js"></script>
    
    <script>
        // 全局API客户端和保存管理器实例
        let apiClient = null;
        let reviewSaveManager = null;

        // 依赖检查函数
        function checkDependencies() {
            console.log('🔍 检查JavaScript依赖...');
            
            const dependencies = [
                { name: 'ApiClient', check: () => typeof ApiClient !== 'undefined' },
                { name: 'ReviewSaveManager', check: () => typeof ReviewSaveManager !== 'undefined' },
                { name: 'Bootstrap', check: () => typeof bootstrap !== 'undefined' }
            ];
            
            const missing = dependencies.filter(dep => !dep.check());
            
            if (missing.length > 0) {
                const missingNames = missing.map(dep => dep.name).join(', ');
                console.error('❌ 缺少依赖:', missingNames);
                showErrorMessage(`页面依赖加载失败: ${missingNames}。请刷新页面重试。`);
                return false;
            }
            
            console.log('✅ 所有依赖检查通过');
            return true;
        }

        // 初始化API客户端
        function initializeApiClient() {
            console.log('🔧 初始化API客户端...');
            
            try {
                if (typeof ApiClient !== 'undefined') {
                    apiClient = new ApiClient();
                    console.log('✅ API客户端初始化成功');
                    return true;
                } else {
                    console.error('❌ ApiClient类未找到');
                    showErrorMessage('API客户端加载失败，请刷新页面重试');
                    return false;
                }
            } catch (error) {
                console.error('❌ API客户端初始化失败:', error);
                showErrorMessage('API客户端初始化失败: ' + error.message);
                return false;
            }
        }

        // 初始化复盘保存管理器
        function initializeReviewSaveManager() {
            console.log('🔧 初始化复盘保存管理器...');
            
            try {
                if (typeof ReviewSaveManager !== 'undefined') {
                    reviewSaveManager = new ReviewSaveManager('#review-form');
                    console.log('✅ 复盘保存管理器初始化成功');
                    return true;
                } else {
                    console.error('❌ ReviewSaveManager类未找到');
                    showErrorMessage('保存管理器加载失败，请刷新页面重试');
                    return false;
                }
            } catch (error) {
                console.error('❌ 复盘保存管理器初始化失败:', error);
                showErrorMessage('保存管理器初始化失败: ' + error.message);
                return false;
            }
        }

        // 统一错误消息显示
        function showErrorMessage(message) {
            console.error('错误:', message);
            
            // 创建错误提示
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-danger alert-dismissible fade show position-fixed';
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                <i class="fas fa-exclamation-triangle me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            // 5秒后自动移除
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }

        // 统一成功消息显示
        function showSuccessMessage(message) {
            console.log('成功:', message);
            
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success alert-dismissible fade show position-fixed';
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                <i class="fas fa-check-circle me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 3000);
        }

        // 页面初始化主函数
        async function initializeReviewPage() {
            console.log('🚀 开始初始化复盘页面');
            
            const initSteps = [
                { name: '依赖检查', fn: checkDependencies },
                { name: 'API客户端', fn: initializeApiClient },
                { name: '保存管理器', fn: initializeReviewSaveManager }
            ];
            
            let allSuccess = true;
            
            for (const step of initSteps) {
                try {
                    console.log(`📋 执行${step.name}...`);
                    const success = step.fn();
                    if (success === false) {
                        console.error(`❌ ${step.name}失败`);
                        allSuccess = false;
                        // 继续执行其他步骤，不中断
                    } else {
                        console.log(`✅ ${step.name}成功`);
                    }
                } catch (error) {
                    console.error(`❌ ${step.name}异常:`, error);
                    showErrorMessage(`${step.name}失败: ${error.message}`);
                    allSuccess = false;
                }
            }
            
            if (allSuccess) {
                console.log('🎉 复盘页面初始化完成');
                showSuccessMessage('复盘页面初始化成功');
            } else {
                console.warn('⚠️ 复盘页面初始化部分失败，某些功能可能无法正常使用');
            }
            
            return allSuccess;
        }

        // 保存复盘函数 - 替换占位符实现
        function saveReview() {
            console.log('🔧 执行复盘保存');
            
            // 检查保存管理器是否已初始化
            if (!reviewSaveManager) {
                console.error('❌ 保存管理器未初始化');
                showErrorMessage('保存功能未正确初始化，请刷新页面重试');
                return;
            }
            
            // 检查API客户端是否已初始化
            if (!apiClient) {
                console.error('❌ API客户端未初始化');
                showErrorMessage('网络连接未正确初始化，请刷新页面重试');
                return;
            }
            
            // 调用保存管理器的保存方法
            try {
                reviewSaveManager.saveReview();
            } catch (error) {
                console.error('❌ 调用保存管理器失败:', error);
                showErrorMessage('保存过程中发生错误: ' + error.message);
            }
        }

        // 调试和测试函数
        function testInitialization() {
            console.log('🧪 测试初始化状态');
            
            const results = {
                dependencies: checkDependencies(),
                apiClient: apiClient !== null,
                reviewSaveManager: reviewSaveManager !== null
            };
            
            console.table(results);
            
            const allGood = Object.values(results).every(v => v === true);
            
            if (allGood) {
                showSuccessMessage('所有组件初始化正常');
            } else {
                showErrorMessage('部分组件初始化失败，请检查控制台');
            }
            
            // 更新状态显示
            const statusDiv = document.getElementById('status-display');
            statusDiv.innerHTML = `
                <h6>初始化状态:</h6>
                <ul class="list-unstyled">
                    <li>${results.dependencies ? '✅' : '❌'} 依赖检查</li>
                    <li>${results.apiClient ? '✅' : '❌'} API客户端</li>
                    <li>${results.reviewSaveManager ? '✅' : '❌'} 保存管理器</li>
                </ul>
            `;
            
            return results;
        }

        // 诊断函数
        function diagnoseReviewPage() {
            console.log('🔍 诊断复盘页面状态');
            
            const diagnosis = {
                '页面元素': {
                    'review-form': !!document.getElementById('review-form'),
                    'save-review-btn': !!document.getElementById('save-review-btn')
                },
                'JavaScript类': {
                    'ApiClient': typeof ApiClient !== 'undefined',
                    'ReviewSaveManager': typeof ReviewSaveManager !== 'undefined',
                    'Bootstrap': typeof bootstrap !== 'undefined'
                },
                '全局实例': {
                    'apiClient': apiClient !== null,
                    'reviewSaveManager': reviewSaveManager !== null
                }
            };
            
            console.group('📊 诊断结果');
            Object.entries(diagnosis).forEach(([category, items]) => {
                console.group(category);
                Object.entries(items).forEach(([item, status]) => {
                    console.log(`${status ? '✅' : '❌'} ${item}: ${status}`);
                });
                console.groupEnd();
            });
            console.groupEnd();
            
            return diagnosis;
        }

        // 测试保存功能
        function testSaveReview() {
            console.log('🧪 测试保存功能');
            
            // 设置测试数据
            document.getElementById('review-date').value = new Date().toISOString().split('T')[0];
            document.getElementById('decision').value = 'hold';
            
            // 调用保存
            saveReview();
        }

        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('DOM加载完成，开始初始化复盘页面');
            await initializeReviewPage();
        });

        // 在控制台中暴露测试函数
        window.testInitialization = testInitialization;
        window.diagnoseReviewPage = diagnoseReviewPage;
        window.testSaveReview = testSaveReview;
    </script>
</body>
</html>