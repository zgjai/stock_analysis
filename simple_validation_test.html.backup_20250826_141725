<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>简单验证测试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .result-box {
            background: #212529;
            color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.375rem;
            font-family: monospace;
            white-space: pre-wrap;
            max-height: 300px;
            overflow-y: auto;
            font-size: 0.9rem;
        }
        .success { color: #28a745; }
        .error { color: #dc3545; }
        .warning { color: #ffc107; }
        .info { color: #17a2b8; }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <h1>🚨 简单验证测试</h1>
                <p class="text-muted">快速测试数据验证问题是否已修复</p>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5>测试表单</h5>
                    </div>
                    <div class="card-body">
                        <form id="test-form">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">股票代码 *</label>
                                        <input type="text" class="form-control" id="stock-code" name="stock_code" 
                                               value="000001" required maxlength="6">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">股票名称 *</label>
                                        <input type="text" class="form-control" id="stock-name" name="stock_name" 
                                               value="平安银行" required>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">交易类型 *</label>
                                        <select class="form-select" id="trade-type" name="trade_type" required>
                                            <option value="">请选择</option>
                                            <option value="buy" selected>买入</option>
                                            <option value="sell">卖出</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">价格 *</label>
                                        <input type="number" class="form-control" id="price" name="price" 
                                               value="10.50" step="0.01" required>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">数量 *</label>
                                        <input type="number" class="form-control" id="quantity" name="quantity" 
                                               value="1000" step="100" required>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">操作原因 *</label>
                                        <select class="form-select" id="reason" name="reason" required>
                                            <option value="">请选择</option>
                                            <option value="少妇B1战法" selected>少妇B1战法</option>
                                            <option value="少妇SB1战法">少妇SB1战法</option>
                                            <option value="少妇B2战法">少妇B2战法</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">交易日期 *</label>
                                        <input type="datetime-local" class="form-control" id="trade-date" name="trade_date" required>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">备注</label>
                                <textarea class="form-control" id="notes" name="notes" rows="2" 
                                          placeholder="可选备注...">测试交易记录</textarea>
                            </div>
                        </form>
                        
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-primary" onclick="testFormData()">
                                📋 测试表单数据
                            </button>
                            <button type="button" class="btn btn-success" onclick="testApiCall()">
                                🚀 测试API调用
                            </button>
                            <button type="button" class="btn btn-warning" onclick="testEmptyFields()">
                                ⚠️ 测试空字段
                            </button>
                            <button type="button" class="btn btn-info" onclick="clearResults()">
                                🗑️ 清空结果
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>测试结果</h5>
                    </div>
                    <div class="card-body p-0">
                        <div id="results" class="result-box">等待测试...</div>
                    </div>
                </div>
                
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>修复说明</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-success alert-sm">
                            <strong>已修复:</strong>
                            <ul class="mb-0 mt-1">
                                <li>简化了前端验证逻辑</li>
                                <li>增强了后端数据处理</li>
                                <li>支持字符串格式数字</li>
                                <li>自动处理空格</li>
                            </ul>
                        </div>
                        <div class="alert alert-info alert-sm">
                            <strong>如果仍有问题:</strong>
                            <ol class="mb-0 mt-1">
                                <li>刷新页面重试</li>
                                <li>检查控制台错误</li>
                                <li>确认网络连接</li>
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        // 设置当前时间
        document.getElementById('trade-date').value = new Date().toISOString().slice(0, 16);
        
        function log(message, type = 'info') {
            const results = document.getElementById('results');
            const time = new Date().toLocaleTimeString();
            const className = type;
            results.innerHTML += `<span class="${className}">[${time}] ${message}</span>\n`;
            results.scrollTop = results.scrollHeight;
        }
        
        function clearResults() {
            document.getElementById('results').innerHTML = '测试结果已清空...\n';
        }
        
        // FormUtils.serialize 实现
        const FormUtils = {
            serialize: (form) => {
                const formData = new FormData(form);
                const data = {};
                for (let [key, value] of formData.entries()) {
                    data[key] = value;
                }
                return data;
            }
        };
        
        function testFormData() {
            clearResults();
            log('=== 测试表单数据获取 ===', 'info');
            
            const form = document.getElementById('test-form');
            
            // 1. 检查表单元素
            log('1. 检查表单元素...', 'info');
            if (!form) {
                log('❌ 表单未找到', 'error');
                return;
            }
            log('✅ 表单存在', 'success');
            
            // 2. 获取表单数据
            log('2. 获取表单数据...', 'info');
            const data = FormUtils.serialize(form);
            log('表单数据:', 'info');
            log(JSON.stringify(data, null, 2), 'info');
            
            // 3. 验证必填字段
            log('3. 验证必填字段...', 'info');
            const required = ['stock_code', 'stock_name', 'trade_type', 'price', 'quantity', 'reason'];
            let allValid = true;
            
            required.forEach(field => {
                const value = data[field];
                const isEmpty = !value || value.toString().trim() === '';
                
                if (isEmpty) {
                    log(`❌ ${field}: 空值`, 'error');
                    allValid = false;
                } else {
                    log(`✅ ${field}: "${value}"`, 'success');
                }
            });
            
            // 4. 数据类型检查
            log('4. 数据类型检查...', 'info');
            if (data.price) {
                const price = parseFloat(data.price);
                log(`价格转换: "${data.price}" -> ${price} (${isNaN(price) ? '❌ 无效' : '✅ 有效'})`, 
                    isNaN(price) ? 'error' : 'success');
            }
            
            if (data.quantity) {
                const quantity = parseInt(data.quantity);
                log(`数量转换: "${data.quantity}" -> ${quantity} (${isNaN(quantity) ? '❌ 无效' : '✅ 有效'})`, 
                    isNaN(quantity) ? 'error' : 'success');
            }
            
            log(`\\n总体验证: ${allValid ? '✅ 通过' : '❌ 失败'}`, allValid ? 'success' : 'error');
        }
        
        async function testApiCall() {
            clearResults();
            log('=== 测试API调用 ===', 'info');
            
            const form = document.getElementById('test-form');
            const data = FormUtils.serialize(form);
            
            // 数据预处理
            log('1. 数据预处理...', 'info');
            if (data.price) data.price = parseFloat(data.price);
            if (data.quantity) data.quantity = parseInt(data.quantity);
            
            log('发送数据:', 'info');
            log(JSON.stringify(data, null, 2), 'info');
            
            // 发送请求
            log('2. 发送API请求...', 'info');
            try {
                const response = await axios.post('/api/trades', data, {
                    headers: { 'Content-Type': 'application/json' },
                    timeout: 15000
                });
                
                log('✅ API调用成功!', 'success');
                log(`状态码: ${response.status}`, 'success');
                log('响应数据:', 'success');
                log(JSON.stringify(response.data, null, 2), 'success');
                
            } catch (error) {
                log('❌ API调用失败!', 'error');
                
                if (error.response) {
                    log(`HTTP错误: ${error.response.status}`, 'error');
                    
                    if (error.response.status === 403) {
                        log('这是权限错误，可能需要登录或CSRF令牌', 'warning');
                    } else if (error.response.status === 422) {
                        log('这是数据验证错误', 'warning');
                    }
                    
                    try {
                        const errorData = error.response.data;
                        log('错误详情:', 'error');
                        log(JSON.stringify(errorData, null, 2), 'error');
                    } catch (e) {
                        log('无法解析错误响应', 'error');
                    }
                } else if (error.request) {
                    log('网络错误: 无法连接到服务器', 'error');
                } else {
                    log(`请求错误: ${error.message}`, 'error');
                }
            }
        }
        
        function testEmptyFields() {
            clearResults();
            log('=== 测试空字段处理 ===', 'warning');
            
            const form = document.getElementById('test-form');
            
            // 临时清空股票代码
            const stockCodeInput = document.getElementById('stock-code');
            const originalValue = stockCodeInput.value;
            stockCodeInput.value = '';
            
            log('1. 清空股票代码字段...', 'warning');
            
            const data = FormUtils.serialize(form);
            log('表单数据:', 'info');
            log(JSON.stringify(data, null, 2), 'info');
            
            // 检查空字段
            log('2. 检查空字段...', 'info');
            const required = ['stock_code', 'stock_name', 'trade_type', 'price', 'quantity', 'reason'];
            
            required.forEach(field => {
                const value = data[field];
                const isEmpty = !value || value.toString().trim() === '';
                
                if (isEmpty) {
                    log(`❌ ${field}: 检测到空值`, 'error');
                } else {
                    log(`✅ ${field}: 有值`, 'success');
                }
            });
            
            // 恢复原值
            stockCodeInput.value = originalValue;
            log('3. 已恢复原始值', 'info');
        }
        
        // 页面加载完成
        document.addEventListener('DOMContentLoaded', () => {
            log('页面加载完成，可以开始测试', 'success');
        });
    </script>
</body>
</html>