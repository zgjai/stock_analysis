<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>性能优化测试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="static/css/mobile-optimizations.css">
    <style>
        .test-section {
            margin: 2rem 0;
            padding: 1.5rem;
            border: 1px solid #dee2e6;
            border-radius: 8px;
        }
        
        .test-result {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.9rem;
        }
        
        .test-success {
            background-color: #d1edff;
            border: 1px solid #0d6efd;
            color: #0d6efd;
        }
        
        .test-error {
            background-color: #f8d7da;
            border: 1px solid #dc3545;
            color: #dc3545;
        }
        
        .performance-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .metric-card {
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 6px;
            text-align: center;
        }
        
        .metric-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #007bff;
        }
        
        .metric-label {
            font-size: 0.9rem;
            color: #6c757d;
            margin-top: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1 class="mb-4">性能优化功能测试</h1>
        
        <!-- 防抖和节流测试 -->
        <div class="test-section">
            <h3>防抖和节流测试</h3>
            <p>测试防抖和节流函数的性能优化效果</p>
            
            <div class="row">
                <div class="col-md-6">
                    <label for="debounce-input" class="form-label">防抖输入测试 (300ms延迟)</label>
                    <input type="text" class="form-control" id="debounce-input" placeholder="快速输入文字...">
                    <div id="debounce-result" class="test-result test-success d-none"></div>
                </div>
                
                <div class="col-md-6">
                    <label for="throttle-input" class="form-label">节流输入测试 (100ms限制)</label>
                    <input type="text" class="form-control" id="throttle-input" placeholder="快速输入文字...">
                    <div id="throttle-result" class="test-result test-success d-none"></div>
                </div>
            </div>
            
            <div class="performance-metrics">
                <div class="metric-card">
                    <div class="metric-value" id="debounce-calls">0</div>
                    <div class="metric-label">防抖函数调用次数</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="throttle-calls">0</div>
                    <div class="metric-label">节流函数调用次数</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="input-events">0</div>
                    <div class="metric-label">输入事件总数</div>
                </div>
            </div>
        </div>
        
        <!-- 缓存测试 -->
        <div class="test-section">
            <h3>内存缓存测试</h3>
            <p>测试内存缓存的性能提升效果</p>
            
            <div class="row">
                <div class="col-md-4">
                    <button class="btn btn-primary" id="cache-set-btn">设置缓存数据</button>
                </div>
                <div class="col-md-4">
                    <button class="btn btn-success" id="cache-get-btn">获取缓存数据</button>
                </div>
                <div class="col-md-4">
                    <button class="btn btn-warning" id="cache-clear-btn">清空缓存</button>
                </div>
            </div>
            
            <div id="cache-result" class="test-result test-success d-none"></div>
            
            <div class="performance-metrics">
                <div class="metric-card">
                    <div class="metric-value" id="cache-hits">0</div>
                    <div class="metric-label">缓存命中次数</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="cache-misses">0</div>
                    <div class="metric-label">缓存未命中次数</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="cache-size">0</div>
                    <div class="metric-label">缓存大小</div>
                </div>
            </div>
        </div>
        
        <!-- 加载指示器测试 -->
        <div class="test-section">
            <h3>加载指示器测试</h3>
            <p>测试各种加载状态的视觉反馈</p>
            
            <div class="row">
                <div class="col-md-3">
                    <button class="btn btn-primary" id="global-loading-btn">全局加载</button>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-success" id="button-loading-btn">按钮加载</button>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-info" id="inline-loading-btn">内联加载</button>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-warning" id="progress-bar-btn">进度条</button>
                </div>
            </div>
            
            <div id="inline-loading-container" class="mt-3"></div>
            <div id="progress-container" class="mt-3"></div>
            
            <div class="performance-metrics">
                <div class="metric-card">
                    <div class="metric-value" id="loading-duration">0ms</div>
                    <div class="metric-label">加载持续时间</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="active-loaders">0</div>
                    <div class="metric-label">活跃加载器数量</div>
                </div>
            </div>
        </div>
        
        <!-- 自动保存测试 -->
        <div class="test-section">
            <h3>自动保存测试</h3>
            <p>测试自动保存功能和离线队列</p>
            
            <div class="row">
                <div class="col-md-6">
                    <label for="auto-save-input" class="form-label">自动保存输入框</label>
                    <textarea class="form-control" id="auto-save-input" rows="4" placeholder="输入内容将自动保存..."></textarea>
                </div>
                <div class="col-md-6">
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" id="enable-auto-save-btn">启用自动保存</button>
                        <button class="btn btn-secondary" id="disable-auto-save-btn">禁用自动保存</button>
                        <button class="btn btn-warning" id="simulate-offline-btn">模拟离线</button>
                        <button class="btn btn-success" id="simulate-online-btn">模拟上线</button>
                    </div>
                </div>
            </div>
            
            <div id="auto-save-result" class="test-result test-success d-none"></div>
            
            <div class="performance-metrics">
                <div class="metric-card">
                    <div class="metric-value" id="auto-save-count">0</div>
                    <div class="metric-label">自动保存次数</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="offline-queue-size">0</div>
                    <div class="metric-label">离线队列大小</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="last-save-time">--</div>
                    <div class="metric-label">最后保存时间</div>
                </div>
            </div>
        </div>
        
        <!-- 键盘快捷键测试 -->
        <div class="test-section">
            <h3>键盘快捷键测试</h3>
            <p>测试键盘快捷键功能 (按 F1 或 Ctrl+/ 查看帮助)</p>
            
            <div class="row">
                <div class="col-md-6">
                    <h6>可用快捷键:</h6>
                    <ul class="list-unstyled">
                        <li><kbd>Ctrl+S</kbd> - 模拟保存</li>
                        <li><kbd>Ctrl+R</kbd> - 刷新数据</li>
                        <li><kbd>F1</kbd> - 显示帮助</li>
                        <li><kbd>Ctrl+/</kbd> - 显示快捷键帮助</li>
                        <li><kbd>Esc</kbd> - 取消操作</li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <button class="btn btn-info" id="show-shortcuts-btn">显示所有快捷键</button>
                </div>
            </div>
            
            <div id="shortcut-result" class="test-result test-success d-none"></div>
            
            <div class="performance-metrics">
                <div class="metric-card">
                    <div class="metric-value" id="shortcut-executions">0</div>
                    <div class="metric-label">快捷键执行次数</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="current-context">global</div>
                    <div class="metric-label">当前上下文</div>
                </div>
            </div>
        </div>
        
        <!-- 移动端优化测试 -->
        <div class="test-section">
            <h3>移动端优化测试</h3>
            <p>测试移动端响应式设计和触摸优化 (在移动设备上查看效果)</p>
            
            <div class="row">
                <div class="col-12">
                    <div class="score-item">
                        <label>触摸友好的评分项</label>
                        <input type="checkbox" id="mobile-score-1">
                    </div>
                    <div class="score-item">
                        <label>另一个评分项</label>
                        <input type="checkbox" id="mobile-score-2">
                    </div>
                </div>
            </div>
            
            <div class="floating-profit-container mt-3">
                <label for="mobile-price-input" class="form-label">当前价格</label>
                <input type="number" class="form-control" id="mobile-price-input" placeholder="输入价格">
                <div class="profit-details">
                    <div class="profit-detail-item">
                        <div class="profit-detail-label">浮盈比例</div>
                        <div class="profit-detail-value text-success">+8.50%</div>
                    </div>
                    <div class="profit-detail-item">
                        <div class="profit-detail-label">盈亏金额</div>
                        <div class="profit-detail-value text-success">+¥1,250</div>
                    </div>
                </div>
            </div>
            
            <div class="performance-metrics">
                <div class="metric-card">
                    <div class="metric-value" id="viewport-width">--</div>
                    <div class="metric-label">视口宽度</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="touch-support">--</div>
                    <div class="metric-label">触摸支持</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="device-pixel-ratio">--</div>
                    <div class="metric-label">设备像素比</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- 性能优化脚本 -->
    <script src="static/js/performance-optimizations.js"></script>
    <script src="static/js/auto-save-manager.js"></script>
    <script src="static/js/loading-indicators.js"></script>
    <script src="static/js/keyboard-shortcuts.js"></script>
    
    <script>
        // 测试脚本
        class PerformanceOptimizationTester {
            constructor() {
                this.metrics = {
                    debounceCallCount: 0,
                    throttleCallCount: 0,
                    inputEventCount: 0,
                    cacheHits: 0,
                    cacheMisses: 0,
                    autoSaveCount: 0,
                    shortcutExecutions: 0
                };
                
                this.testCache = new MemoryCache(10, 5000);
                this.progressBar = null;
                
                this.init();
            }
            
            init() {
                this.setupDebounceThrottleTest();
                this.setupCacheTest();
                this.setupLoadingTest();
                this.setupAutoSaveTest();
                this.setupKeyboardShortcutTest();
                this.setupMobileTest();
                this.updateMetrics();
            }
            
            setupDebounceThrottleTest() {
                const debounceInput = document.getElementById('debounce-input');
                const throttleInput = document.getElementById('throttle-input');
                
                // 防抖测试
                const debouncedHandler = debounce((value) => {
                    this.metrics.debounceCallCount++;
                    document.getElementById('debounce-result').textContent = 
                        `防抖处理: "${value}" (调用次数: ${this.metrics.debounceCallCount})`;
                    document.getElementById('debounce-result').classList.remove('d-none');
                    this.updateMetrics();
                }, 300);
                
                debounceInput.addEventListener('input', (e) => {
                    this.metrics.inputEventCount++;
                    debouncedHandler(e.target.value);
                    this.updateMetrics();
                });
                
                // 节流测试
                const throttledHandler = throttle((value) => {
                    this.metrics.throttleCallCount++;
                    document.getElementById('throttle-result').textContent = 
                        `节流处理: "${value}" (调用次数: ${this.metrics.throttleCallCount})`;
                    document.getElementById('throttle-result').classList.remove('d-none');
                    this.updateMetrics();
                }, 100);
                
                throttleInput.addEventListener('input', (e) => {
                    this.metrics.inputEventCount++;
                    throttledHandler(e.target.value);
                    this.updateMetrics();
                });
            }
            
            setupCacheTest() {
                document.getElementById('cache-set-btn').addEventListener('click', () => {
                    const data = {
                        timestamp: Date.now(),
                        randomValue: Math.random(),
                        message: '这是缓存的测试数据'
                    };
                    
                    this.testCache.set('test-data', data);
                    document.getElementById('cache-result').textContent = 
                        `缓存已设置: ${JSON.stringify(data, null, 2)}`;
                    document.getElementById('cache-result').classList.remove('d-none');
                    this.updateMetrics();
                });
                
                document.getElementById('cache-get-btn').addEventListener('click', () => {
                    const data = this.testCache.get('test-data');
                    if (data) {
                        this.metrics.cacheHits++;
                        document.getElementById('cache-result').textContent = 
                            `缓存命中: ${JSON.stringify(data, null, 2)}`;
                    } else {
                        this.metrics.cacheMisses++;
                        document.getElementById('cache-result').textContent = '缓存未命中';
                    }
                    document.getElementById('cache-result').classList.remove('d-none');
                    this.updateMetrics();
                });
                
                document.getElementById('cache-clear-btn').addEventListener('click', () => {
                    this.testCache.clear();
                    document.getElementById('cache-result').textContent = '缓存已清空';
                    document.getElementById('cache-result').classList.remove('d-none');
                    this.updateMetrics();
                });
            }
            
            setupLoadingTest() {
                document.getElementById('global-loading-btn').addEventListener('click', () => {
                    loadingManager.showGlobal('测试全局加载...', 'test-global');
                    setTimeout(() => {
                        loadingManager.hideGlobal('test-global');
                    }, 2000);
                });
                
                document.getElementById('button-loading-btn').addEventListener('click', (e) => {
                    const btn = e.target;
                    loadingManager.setButtonLoading(btn, true, '加载中...');
                    setTimeout(() => {
                        loadingManager.setButtonLoading(btn, false);
                    }, 2000);
                });
                
                document.getElementById('inline-loading-btn').addEventListener('click', () => {
                    const container = document.getElementById('inline-loading-container');
                    container.innerHTML = '';
                    const loader = loadingManager.createInline('内联加载测试...');
                    container.appendChild(loader);
                    
                    setTimeout(() => {
                        container.innerHTML = '<div class="alert alert-success">加载完成!</div>';
                    }, 2000);
                });
                
                document.getElementById('progress-bar-btn').addEventListener('click', () => {
                    const container = document.getElementById('progress-container');
                    container.innerHTML = '';
                    
                    this.progressBar = loadingManager.createProgressBar({ container });
                    
                    let progress = 0;
                    const interval = setInterval(() => {
                        progress += 10;
                        this.progressBar.setProgress(progress);
                        
                        if (progress >= 100) {
                            clearInterval(interval);
                            setTimeout(() => {
                                this.progressBar.destroy();
                                container.innerHTML = '<div class="alert alert-success">进度完成!</div>';
                            }, 500);
                        }
                    }, 200);
                });
            }
            
            setupAutoSaveTest() {
                const input = document.getElementById('auto-save-input');
                let autoSaveEnabled = false;
                
                document.getElementById('enable-auto-save-btn').addEventListener('click', () => {
                    if (!autoSaveEnabled) {
                        autoSaveManager.enable(
                            () => this.mockSave(input.value),
                            () => input.value.trim() !== '',
                            'test'
                        );
                        autoSaveEnabled = true;
                        document.getElementById('auto-save-result').textContent = '自动保存已启用';
                        document.getElementById('auto-save-result').classList.remove('d-none');
                    }
                });
                
                document.getElementById('disable-auto-save-btn').addEventListener('click', () => {
                    autoSaveManager.disable('test');
                    autoSaveEnabled = false;
                    document.getElementById('auto-save-result').textContent = '自动保存已禁用';
                    document.getElementById('auto-save-result').classList.remove('d-none');
                });
                
                document.getElementById('simulate-offline-btn').addEventListener('click', () => {
                    // 模拟离线状态
                    Object.defineProperty(navigator, 'onLine', {
                        writable: true,
                        value: false
                    });
                    window.dispatchEvent(new Event('offline'));
                    document.getElementById('auto-save-result').textContent = '已模拟离线状态';
                    document.getElementById('auto-save-result').classList.remove('d-none');
                });
                
                document.getElementById('simulate-online-btn').addEventListener('click', () => {
                    // 模拟上线状态
                    Object.defineProperty(navigator, 'onLine', {
                        writable: true,
                        value: true
                    });
                    window.dispatchEvent(new Event('online'));
                    document.getElementById('auto-save-result').textContent = '已模拟上线状态';
                    document.getElementById('auto-save-result').classList.remove('d-none');
                });
            }
            
            async mockSave(data) {
                this.metrics.autoSaveCount++;
                document.getElementById('last-save-time').textContent = 
                    new Date().toLocaleTimeString();
                this.updateMetrics();
                
                // 模拟保存延迟
                await new Promise(resolve => setTimeout(resolve, 100));
                
                return { success: true, data: data };
            }
            
            setupKeyboardShortcutTest() {
                // 监听快捷键执行事件
                document.addEventListener('keyboardShortcut:shortcutExecuted', (e) => {
                    this.metrics.shortcutExecutions++;
                    document.getElementById('shortcut-result').textContent = 
                        `执行快捷键: ${e.detail.key}`;
                    document.getElementById('shortcut-result').classList.remove('d-none');
                    this.updateMetrics();
                });
                
                // 监听上下文变化
                document.addEventListener('keyboardShortcut:contextChanged', (e) => {
                    document.getElementById('current-context').textContent = e.detail.newContext;
                });
                
                document.getElementById('show-shortcuts-btn').addEventListener('click', () => {
                    keyboardShortcutManager.showHelp();
                });
                
                // 注册测试快捷键
                keyboardShortcutManager.register('ctrl+s', (e) => {
                    e.preventDefault();
                    document.getElementById('shortcut-result').textContent = '执行了保存操作';
                    document.getElementById('shortcut-result').classList.remove('d-none');
                }, {
                    description: '测试保存',
                    context: 'global'
                });
                
                keyboardShortcutManager.register('ctrl+r', (e) => {
                    e.preventDefault();
                    document.getElementById('shortcut-result').textContent = '执行了刷新操作';
                    document.getElementById('shortcut-result').classList.remove('d-none');
                }, {
                    description: '测试刷新',
                    context: 'global'
                });
            }
            
            setupMobileTest() {
                this.updateMobileMetrics();
                
                // 监听窗口大小变化
                window.addEventListener('resize', () => {
                    this.updateMobileMetrics();
                });
                
                // 监听设备方向变化
                window.addEventListener('orientationchange', () => {
                    setTimeout(() => {
                        this.updateMobileMetrics();
                    }, 100);
                });
            }
            
            updateMobileMetrics() {
                document.getElementById('viewport-width').textContent = `${window.innerWidth}px`;
                document.getElementById('touch-support').textContent = 
                    'ontouchstart' in window ? '支持' : '不支持';
                document.getElementById('device-pixel-ratio').textContent = 
                    window.devicePixelRatio || 1;
            }
            
            updateMetrics() {
                document.getElementById('debounce-calls').textContent = this.metrics.debounceCallCount;
                document.getElementById('throttle-calls').textContent = this.metrics.throttleCallCount;
                document.getElementById('input-events').textContent = this.metrics.inputEventCount;
                document.getElementById('cache-hits').textContent = this.metrics.cacheHits;
                document.getElementById('cache-misses').textContent = this.metrics.cacheMisses;
                document.getElementById('cache-size').textContent = this.testCache.size();
                document.getElementById('auto-save-count').textContent = this.metrics.autoSaveCount;
                document.getElementById('shortcut-executions').textContent = this.metrics.shortcutExecutions;
                
                // 更新离线队列大小
                const autoSaveStatus = autoSaveManager.getStatus();
                document.getElementById('offline-queue-size').textContent = autoSaveStatus.queueSize;
                
                // 更新活跃加载器数量
                document.getElementById('active-loaders').textContent = 
                    loadingManager.activeLoaders ? loadingManager.activeLoaders.size : 0;
            }
        }
        
        // 页面加载完成后初始化测试
        document.addEventListener('DOMContentLoaded', () => {
            new PerformanceOptimizationTester();
        });
    </script>
</body>
</html>