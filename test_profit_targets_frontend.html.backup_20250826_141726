<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>止盈目标百分比处理测试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-4">
        <h2>止盈目标百分比处理测试</h2>
        <div class="row">
            <div class="col-md-8">
                <div id="profit-targets-container"></div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>测试结果</h5>
                    </div>
                    <div class="card-body">
                        <div id="test-results"></div>
                        <button class="btn btn-primary" onclick="runTests()">运行测试</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/profit-targets-manager.js') }}"></script>
    
    <script>
        let profitTargetsManager;
        
        // 初始化组件
        function initializeComponent() {
            const container = document.getElementById('profit-targets-container');
            profitTargetsManager = new ProfitTargetsManager(container, {
                maxTargets: 10,
                minTargets: 1,
                buyPrice: 10.00,
                onTargetsChange: (targets, isValid) => {
                    console.log('Targets changed:', targets, 'Valid:', isValid);
                },
                onValidationChange: (isValid, errors) => {
                    console.log('Validation changed:', isValid, errors);
                }
            });
        }
        
        // 运行测试
        function runTests() {
            const resultsDiv = document.getElementById('test-results');
            let results = [];
            
            // 测试1: 大于10%的止盈比例
            results.push('<h6>测试1: 大于10%的止盈比例</h6>');
            try {
                profitTargetsManager.setTargets([
                    { profitRatio: 20, sellRatio: 50, sequenceOrder: 1 },
                    { profitRatio: 50, sellRatio: 30, sequenceOrder: 2 }
                ]);
                
                const targets = profitTargetsManager.getTargets();
                if (targets.length === 2 && targets[0].profitRatio === 20 && targets[1].profitRatio === 50) {
                    results.push('<span class="text-success">✓ 通过</span><br>');
                } else {
                    results.push('<span class="text-danger">✗ 失败</span><br>');
                }
            } catch (e) {
                results.push(`<span class="text-danger">✗ 错误: ${e.message}</span><br>`);
            }
            
            // 测试2: 大于100%的卖出比例
            results.push('<h6>测试2: 大于100%的卖出比例</h6>');
            try {
                profitTargetsManager.setTargets([
                    { profitRatio: 15, sellRatio: 120, sequenceOrder: 1 }
                ]);
                
                const targets = profitTargetsManager.getTargets();
                if (targets.length === 1 && targets[0].sellRatio === 120) {
                    results.push('<span class="text-success">✓ 通过</span><br>');
                } else {
                    results.push('<span class="text-danger">✗ 失败</span><br>');
                }
            } catch (e) {
                results.push(`<span class="text-danger">✗ 错误: ${e.message}</span><br>`);
            }
            
            // 测试3: 百分比格式转换
            results.push('<h6>测试3: 百分比格式转换</h6>');
            try {
                // 模拟从后端获取的小数格式数据
                profitTargetsManager.setTargets([
                    { profit_ratio: 0.255, sell_ratio: 0.3333, sequenceOrder: 1 }
                ]);
                
                const targets = profitTargetsManager.getTargets();
                if (targets.length === 1 && Math.abs(targets[0].profitRatio - 25.5) < 0.1 && Math.abs(targets[0].sellRatio - 33.33) < 0.1) {
                    results.push('<span class="text-success">✓ 通过</span><br>');
                } else {
                    results.push('<span class="text-danger">✗ 失败</span><br>');
                }
            } catch (e) {
                results.push(`<span class="text-danger">✗ 错误: ${e.message}</span><br>`);
            }
            
            // 测试4: 验证逻辑
            results.push('<h6>测试4: 验证逻辑</h6>');
            try {
                profitTargetsManager.setTargets([
                    { profitRatio: 1001, sellRatio: 50, sequenceOrder: 1 }  // 超出最大值
                ]);
                
                const isValid = profitTargetsManager.isValidTargets();
                if (!isValid) {
                    results.push('<span class="text-success">✓ 通过 (正确拒绝超出最大值)</span><br>');
                } else {
                    results.push('<span class="text-danger">✗ 失败 (应该拒绝超出最大值)</span><br>');
                }
            } catch (e) {
                results.push(`<span class="text-danger">✗ 错误: ${e.message}</span><br>`);
            }
            
            resultsDiv.innerHTML = results.join('');
        }
        
        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', function() {
            initializeComponent();
        });
    </script>
</body>
</html>