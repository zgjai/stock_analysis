<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>持仓天数编辑器测试</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-4">
        <h2>持仓天数编辑器测试</h2>
        
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>测试股票 000001</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <label>持仓天数:</label>
                                <div id="editor-container-1"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>测试股票 000002</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <label>持仓天数:</label>
                                <div id="editor-container-2"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="mt-4">
            <h4>测试控制</h4>
            <button class="btn btn-primary" onclick="testGetValues()">获取所有值</button>
            <button class="btn btn-secondary" onclick="testSetValues()">设置测试值</button>
            <button class="btn btn-danger" onclick="testDestroy()">销毁编辑器</button>
        </div>
        
        <div class="mt-3">
            <h5>测试结果:</h5>
            <pre id="test-results" class="bg-light p-3"></pre>
        </div>
    </div>

    <!-- Toast容器 -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3" id="toast-container"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    
    <!-- 模拟API客户端 -->
    <script>
        // 模拟API客户端用于测试
        const apiClient = {
            async updateHoldingDays(stockCode, holdingDays) {
                console.log(`Mock API: updateHoldingDays(${stockCode}, ${holdingDays})`);
                
                // 模拟网络延迟
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // 模拟成功响应
                if (holdingDays > 0 && holdingDays <= 9999) {
                    return {
                        success: true,
                        data: {
                            stock_code: stockCode,
                            holding_days: holdingDays,
                            updated_at: new Date().toISOString()
                        },
                        message: "持仓天数更新成功"
                    };
                } else {
                    throw {
                        code: 'VALIDATION_ERROR',
                        message: '持仓天数必须在1-9999之间'
                    };
                }
            }
        };
        
        // 模拟消息显示函数
        function showMessage(message, type = 'info') {
            console.log(`${type.toUpperCase()}: ${message}`);
            
            const toastContainer = document.getElementById('toast-container');
            const toastId = 'toast-' + Date.now();
            
            const colors = {
                'success': 'text-success',
                'error': 'text-danger',
                'warning': 'text-warning',
                'info': 'text-info'
            };
            
            const icons = {
                'success': 'check-circle-fill',
                'error': 'exclamation-triangle-fill',
                'warning': 'exclamation-triangle-fill',
                'info': 'info-circle-fill'
            };
            
            const toastHtml = `
                <div class="toast" id="${toastId}" role="alert">
                    <div class="toast-header">
                        <i class="bi bi-${icons[type]} me-2 ${colors[type]}"></i>
                        <strong class="me-auto">${type}</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">${message}</div>
                </div>
            `;
            
            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement);
            toast.show();
        }
    </script>
    
    <script src="static/js/holding-days-editor.js"></script>
    
    <script>
        let editor1, editor2;
        
        document.addEventListener('DOMContentLoaded', function() {
            console.log('初始化持仓天数编辑器测试...');
            
            // 创建编辑器实例
            editor1 = holdingDaysEditorManager.createEditor(
                '000001',
                15,
                document.getElementById('editor-container-1'),
                {
                    autoSave: true,
                    showLoadingState: true,
                    validateOnInput: true
                }
            );
            
            editor2 = holdingDaysEditorManager.createEditor(
                '000002',
                30,
                document.getElementById('editor-container-2'),
                {
                    autoSave: false,
                    showLoadingState: true,
                    validateOnInput: true
                }
            );
            
            // 监听事件
            document.addEventListener('holdingDaysEditor:saveSuccess', function(event) {
                updateTestResults(`保存成功: ${JSON.stringify(event.detail, null, 2)}`);
            });
            
            document.addEventListener('holdingDaysEditor:saveError', function(event) {
                updateTestResults(`保存失败: ${JSON.stringify(event.detail, null, 2)}`);
            });
            
            document.addEventListener('holdingDaysEditor:editStart', function(event) {
                updateTestResults(`开始编辑: ${JSON.stringify(event.detail, null, 2)}`);
            });
            
            document.addEventListener('holdingDaysEditor:editEnd', function(event) {
                updateTestResults(`结束编辑: ${JSON.stringify(event.detail, null, 2)}`);
            });
        });
        
        function testGetValues() {
            const values = {
                editor1: editor1 ? editor1.getValue() : 'null',
                editor2: editor2 ? editor2.getValue() : 'null'
            };
            updateTestResults(`当前值: ${JSON.stringify(values, null, 2)}`);
        }
        
        function testSetValues() {
            if (editor1) {
                editor1.setValue(25);
            }
            if (editor2) {
                editor2.setValue(45);
            }
            updateTestResults('已设置测试值: editor1=25, editor2=45');
        }
        
        function testDestroy() {
            holdingDaysEditorManager.destroyAll();
            editor1 = null;
            editor2 = null;
            updateTestResults('所有编辑器已销毁');
        }
        
        function updateTestResults(message) {
            const resultsElement = document.getElementById('test-results');
            const timestamp = new Date().toLocaleTimeString();
            resultsElement.textContent += `[${timestamp}] ${message}\n`;
            resultsElement.scrollTop = resultsElement.scrollHeight;
        }
    </script>
</body>
</html>